%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: Logo_JVAM.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Anja Kiebler%%CreationDate: 19.04.2010%%BoundingBox: 0 0 507 507%%HiResBoundingBox: 0 0 506.9297 506.9307%%CropBox: 0 0 506.9297 506.9307%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x5205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2010-04-19T12:51:15+02:00</xap:CreateDate>
         <xap:ModifyDate>2010-04-19T12:51:15+02:00</xap:ModifyDate>
         <xap:MetadataDate>2010-04-19T12:51:15+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUs17zP5d8v2v1rXNTttNg/Ze5lSLlTsoYgsfYYqxP/AJWvNqnw+T/LGqeYVb+7vnjGnWLe&#xA;4uLz0y3+wjbFUvGu/mXqmoHTpte8s+WLpmp9RhdtU1BD/KyyPax8v9gcVTMflpr138Wtee9dun25&#xA;JZPb6ZEfkLaJZB/yM/HFWJPo35Mf8rDXyHqp1W+8wtCs0cuoajfywylkMnphjc8S/EFqFOvTfCrL&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:D966A0D74D4111DF82E3BF7281A18122</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:D966A0D84D4111DF82E3BF7281A18122</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:D966A0D64D4111DF82E3BF7281A18122</stRef:instanceID>
            <stRef:documentID>uuid:D966A0D54D4111DF82E3BF7281A18122</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -506.931 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 506.931 li506.93 506.931 li506.93 0 licpclp[1 0 0 1 0 0 ] concat4.252 lw0 lc0 lj3.86369 ml[] 0 dshtrue sadj92.8379 164.512 mo92.8379 164.512 129.014 112.124 135.571 104.164 cv142.127 96.2036 161.204 76.2754 162.197 75.6001 cv163.189 74.9258 173.293 74.9639 173.293 74.9639 cvfalse sop/0 [/DeviceCMYK] /CSA add_res0 0 0 1 cmyk@2.8346 lw160.14 76.418 mo160.14 76.418 161.259 78.7051 167.759 84.625 cv174.26 90.5449 180.179 96.021 186.158 98.1987 cv192.137 100.377 194.908 98.6714 194.908 98.6714 cv@167.847 83.2588 mo179.259 67.0654 li212.971 63.0908 li212.971 63.0908 217.915 55.3672 220.629 57.4409 cv223.345 59.5142 221.688 67.3599 220.782 66.6685 cv219.877 65.9771 223.773 58.3735 227.18 59.5425 cv230.587 60.7104 226.039 69.2144 226.039 69.2144 cv226.039 69.2144 233.89 58.9341 236.072 61.0796 cv238.256 63.2241 232.55 71.3208 232.55 71.3208 cv232.55 71.3208 240.067 60.2729 243.386 62.8076 cv246.705 65.3423 240.06 74.668 240.06 74.668 cv240.06 74.668 245.803 81.0005 244.634 84.4072 cv243.466 87.8135 235.083 86.188 231.765 83.6533 cv228.446 81.1191 225.143 81.0195 224.007 80.6299 cv222.872 80.2407 206.21 83.8267 202.803 82.6582 cv199.396 81.4897 194.975 80.979 194.975 80.979 cv185.643 96.3721 li@4.252 lw190.497 87.7021 mo190.497 87.7021 195.293 91.2881 199.517 94.5137 cv203.74 97.7393 201.903 102.068 201.903 102.068 cv201.903 102.068 172.1 145.471 167.617 152.591 cv163.134 159.711 146.361 188.6 146.361 188.6 cv@101.181 153.618 mo99.7217 152.98 97.4277 150.309 93.3301 150.045 cv89.2324 149.781 83.5703 150.27 85.8306 154.862 cv88.0908 159.454 100.241 173.032 100.241 173.032 cv100.241 173.032 88.5605 185.2 85.9761 192.336 cv83.3911 199.473 74.854 216.907 75.7148 223.332 cv76.5757 229.756 77.1567 232.075 82.2861 229.783 cv87.416 227.491 106.416 205.116 107.831 201.385 cv109.248 197.654 117.444 181.872 117.444 181.872 cv117.444 181.872 135.212 186.844 143.058 188.5 cv150.903 190.158 171.948 188.963 171.948 188.963 cv171.948 188.963 145.689 224.017 140.553 234.496 cv135.417 244.974 126.496 265.457 126.496 265.457 cv121.163 272.441 li@86.0605 154.56 mo86.0605 154.56 80.0854 176.816 76.064 183.333 cv72.042 189.85 62.291 216.423 61.9995 224.356 cv61.7085 232.29 55.9023 248.023 59.7256 256.197 cv63.5493 264.371 67.4375 269.287 68.1895 272.727 cv68.9409 276.167 68.1118 284.132 69.9492 291.78 cv71.7866 299.428 72.8452 311.223 77.8745 318.443 cv82.9043 325.663 94.5273 345.562 99.9639 351.624 cv105.4 357.686 114.5 369.005 121.938 373.696 cv129.378 378.387 143.448 390.123 143.448 390.123 cv143.448 390.123 141.003 361.914 147.116 352.659 cv153.228 343.404 154.541 322.877 156.17 320.742 cv157.8 318.608 162.289 301.426 162.289 301.426 cv163.623 287.125 li@1 lc145.423 329.766 mo145.423 329.766 154.926 305.392 158.114 298.716 cv161.303 292.039 173.055 268.428 178.075 263.151 cv183.096 257.875 207.658 226.338 211.274 222.854 cv214.89 219.371 225.473 211.143 225.045 207.95 cv224.618 204.757 222.215 199.101 222.215 199.101 cv@0 lc201.76 170.034 mo201.76 170.034 199.165 167.132 195.138 167.4 cv191.112 167.669 171.311 190.423 171.311 190.423 cv@1 lc195.396 175.24 mo196.444 176.996 195.422 185.839 199.937 193.108 cv204.451 200.377 218.335 206.682 218.335 206.682 cv@2.8346 lw0 lc198.796 186.47 mo197.129 186.152 202.708 181.302 202.121 178.942 cv201.534 176.584 200.926 168 203.088 165.794 cv205.25 163.588 209.178 156.522 209.178 156.522 cv209.178 156.522 208.065 144.173 207.709 141.513 cv207.353 138.853 210.31 132.478 211.588 133.932 cv212.866 135.385 211.878 142.308 214.369 146.599 cv216.859 150.889 220.852 154.417 220.353 150.692 cv219.854 146.967 219.735 135.819 220.745 133.247 cv221.754 130.674 223.647 124.442 225.529 126.356 cv227.41 128.271 230.338 142.042 229.4 145.146 cv228.462 148.251 226.717 157.462 229.059 158.773 cv231.402 160.085 235.04 154.743 234.996 150.375 cv234.952 146.008 238.332 132.826 239.644 132.359 cv240.956 131.893 242.563 129.741 244.664 133.292 cv246.764 136.842 244.702 149.596 243.143 152.263 cv241.584 154.929 239.723 163.574 241.857 165.204 cv243.991 166.834 250.037 161.419 250.07 159.5 cv250.104 157.579 251.389 148.972 250.872 147.145 cv250.357 145.318 252.092 139.92 254.061 140.469 cv256.03 141.018 259.743 150.541 260.018 154.606 cv260.291 158.672 254.218 174.13 251.364 177.241 cv248.511 180.352 232.656 191.683 230.121 193.126 cv227.586 194.57 212.954 203.05 212.954 203.05 cv@64.7012 262.863 mo64.7012 262.863 93.3569 239.193 108.827 237.121 cv124.298 235.048 140.849 232.811 140.849 232.811 cv135.241 247.705 li135.241 247.705 117.834 251.642 111.805 253.282 cv105.776 254.922 80.6426 268.351 77.2026 270.978 cv73.7632 273.605 69.0503 281.027 69.0503 281.027 cv64.7012 262.863 licpef64.7012 262.863 mo64.7012 262.863 93.3569 239.193 108.827 237.121 cv124.298 235.048 140.849 232.811 140.849 232.811 cv135.241 247.705 li135.241 247.705 117.834 251.642 111.805 253.282 cv105.776 254.922 80.6426 268.351 77.2026 270.978 cv73.7632 273.605 69.0503 281.027 69.0503 281.027 cv64.7012 262.863 licp@4.252 lw174.92 266.032 mo174.92 266.032 179.33 276.564 180.191 282.989 cv181.052 289.414 179.597 307.002 179.597 307.002 cv@182.7 257.095 mo182.7 257.095 188.153 261.259 191.427 269.528 cv194.702 277.795 193.658 282.288 195.513 289.914 cv197.367 297.54 196.313 305.846 196.313 305.846 cv@1 lc168.564 313.896 mo168.564 313.896 180.447 305.263 190.19 306.937 cv199.933 308.61 206.808 309.083 211.563 312.238 cv216.319 315.392 218.536 315.617 218.536 315.617 cv@1 lj200.657 322.095 mo200.657 322.095 208.698 323.495 211.535 322.282 cv214.371 321.07 217.423 315.245 220.456 315.65 cv223.49 316.057 233.518 317.983 232.382 317.594 cv231.247 317.205 228.492 330.863 228.832 333.547 cv229.171 336.229 229.138 340.025 229.138 340.025 cv@0 lj210.044 371.953 mo210.044 371.953 213.15 354.705 220.985 348.199 cv228.82 341.693 235.206 336.504 245.058 341.162 cv254.911 345.82 253.446 349.036 254.317 353.524 cv255.189 358.011 243.936 371.495 239.751 372.598 cv235.565 373.699 226.573 381.675 226.573 381.675 cv@2.8346 lw197.75 375.495 mo205.386 381.805 li196.81 394.91 li@0 lc194.063 378.447 mo194.063 378.447 198.096 381.97 200.295 382.216 cv202.495 382.463 204.854 381.877 204.854 381.877 cv@193.36 387.499 mo196.006 387.049 205.723 384.291 204.575 383.94 cv@194.672 368.847 mo194.672 368.847 197.833 367.882 199.714 369.796 cv201.596 371.711 202.484 374.3 202.484 374.3 cv@194.969 362.828 mo193.977 363.503 191.195 367.146 191.195 367.146 cv@208.023 393.408 mo204.073 400.457 li@224.527 390.656 mo224.527 390.656 229.744 395.082 228.218 393.953 cv@4.252 lw232.553 377.645 mo231.165 377.539 234.253 382.25 234.297 386.618 cv234.34 390.986 230.39 398.035 230.39 398.035 cv@143.344 393.387 mo143.344 393.387 136.881 391.795 137.787 392.486 cv138.692 393.178 140.101 397.633 140.101 397.633 cv140.101 397.633 133.726 394.676 134.703 395.898 cv135.679 397.122 139.234 401.27 139.234 401.27 cv140.128 405.774 li145.389 412.693 li146.189 416.648 li146.189 416.648 155.12 422.513 153.754 422.425 cv152.388 422.337 155.038 425.794 155.038 425.794 cv155.038 425.794 164.698 428.873 163.311 428.768 cv161.922 428.663 171.956 432.504 171.956 432.504 cv182.144 435.474 li192.951 437.004 li200.899 433.522 li200.899 433.522 211.686 428.827 215.586 427.472 cv219.487 426.117 226.241 419.775 226.241 419.775 cv226.241 419.775 234.042 415.189 234.13 413.823 cv234.218 412.458 247.961 401.389 247.287 400.396 cv246.612 399.402 253.816 384.295 252.822 384.969 cv251.831 385.644 244.829 394.185 244.829 394.185 cv247.886 382.632 li241.132 388.973 li241.132 388.973 236.766 384.683 238.044 386.137 cv239.322 387.59 237.423 391.907 237.5 394.354 cv237.577 396.802 233.956 398.37 233.956 398.37 cv229.271 395.747 li229.271 395.747 224.998 398.216 225.743 399.741 cv226.49 401.266 222.704 397.42 222.704 397.42 cv222.704 397.42 221.201 404.392 219.5 405.994 cv217.799 407.596 210.282 414.311 210.282 414.311 cv214.941 404.458 li214.941 404.458 207.402 411.155 205.115 412.274 cv202.827 413.394 196.266 415.104 196.266 415.104 cv196.266 415.104 204.814 405.835 202.131 406.174 cv199.448 406.514 194.005 410.513 193.386 411.95 cv192.766 413.387 185.903 414.868 186.594 413.963 cv187.285 413.058 190.589 401.181 190.501 402.547 cv190.413 403.912 182.88 410.649 182.88 410.649 cv182.88 410.649 187.505 404.593 185.997 403.44 cv184.488 402.289 182.739 393.274 182.739 393.274 cv182.926 388.605 li180.736 396.522 li180.736 396.522 177.621 385.545 178.367 387.07 cv179.113 388.595 175.585 392.588 175.585 392.588 cv174.301 401.195 li174.301 401.195 167.646 404.234 167.152 406.758 cv166.658 409.281 163.822 414.245 162.066 413.418 cv160.31 412.59 157.167 413.532 153.991 412.062 cv150.815 410.591 149.76 405.045 149.103 404.031 cv143.344 393.387 licpf2.8346 lw143.344 393.387 mo143.344 393.387 136.881 391.795 137.787 392.486 cv138.692 393.178 140.101 397.633 140.101 397.633 cv140.101 397.633 133.726 394.676 134.703 395.898 cv135.679 397.122 139.234 401.27 139.234 401.27 cv140.128 405.774 li145.389 412.693 li146.189 416.648 li146.189 416.648 155.12 422.513 153.754 422.425 cv152.388 422.337 155.038 425.794 155.038 425.794 cv155.038 425.794 164.698 428.873 163.311 428.768 cv161.922 428.663 171.956 432.504 171.956 432.504 cv182.144 435.474 li192.951 437.004 li200.899 433.522 li200.899 433.522 211.686 428.827 215.586 427.472 cv219.487 426.117 226.241 419.775 226.241 419.775 cv226.241 419.775 234.042 415.189 234.13 413.823 cv234.218 412.458 247.961 401.389 247.287 400.396 cv246.612 399.402 253.816 384.295 252.822 384.969 cv251.831 385.644 244.829 394.185 244.829 394.185 cv247.886 382.632 li241.132 388.973 li241.132 388.973 236.766 384.683 238.044 386.137 cv239.322 387.59 237.423 391.907 237.5 394.354 cv237.577 396.802 233.956 398.37 233.956 398.37 cv229.271 395.747 li229.271 395.747 224.998 398.216 225.743 399.741 cv226.49 401.266 222.704 397.42 222.704 397.42 cv222.704 397.42 221.201 404.392 219.5 405.994 cv217.799 407.596 210.282 414.311 210.282 414.311 cv214.941 404.458 li214.941 404.458 207.402 411.155 205.115 412.274 cv202.827 413.394 196.266 415.104 196.266 415.104 cv196.266 415.104 204.814 405.835 202.131 406.174 cv199.448 406.514 194.005 410.513 193.386 411.95 cv192.766 413.387 185.903 414.868 186.594 413.963 cv187.285 413.058 190.589 401.181 190.501 402.547 cv190.413 403.912 182.88 410.649 182.88 410.649 cv182.88 410.649 187.505 404.593 185.997 403.44 cv184.488 402.289 182.739 393.274 182.739 393.274 cv182.926 388.605 li180.736 396.522 li180.736 396.522 177.621 385.545 178.367 387.07 cv179.113 388.595 175.585 392.588 175.585 392.588 cv174.301 401.195 li174.301 401.195 167.646 404.234 167.152 406.758 cv166.658 409.281 163.822 414.245 162.066 413.418 cv160.31 412.59 157.167 413.532 153.991 412.062 cv150.815 410.591 149.76 405.045 149.103 404.031 cv143.344 393.387 licp@4.252 lw1 lc155.267 372.771 mo155.267 372.771 153.841 370.215 149.479 372.173 cv145.117 374.132 143.882 383.254 143.882 383.254 cv@160.226 381.336 mo159.321 380.645 154.492 381.291 153.943 383.261 cv153.395 385.229 152.533 388.906 154.645 390.52 cv156.757 392.132 159.956 393.619 160.63 394.611 cv@163.263 387.99 mo160.746 389.41 159.956 393.619 159.956 393.619 cv159.956 393.619 161.146 396.439 160.597 398.407 cv160.048 400.377 158.704 404.641 158.704 404.641 cv158.704 404.641 165.65 395.545 166.643 394.87 cv167.636 394.195 168.733 390.257 167.526 389.334 cv166.319 388.413 163.263 387.99 163.263 387.99 cvcpef2.8346 lw0 lc163.263 387.99 mo160.746 389.41 159.956 393.619 159.956 393.619 cv159.956 393.619 161.146 396.439 160.597 398.407 cv160.048 400.377 158.704 404.641 158.704 404.641 cv158.704 404.641 165.65 395.545 166.643 394.87 cv167.636 394.195 168.733 390.257 167.526 389.334 cv166.319 388.413 163.263 387.99 163.263 387.99 cvcp@4.252 lw220.223 96.9692 mo220.223 96.9692 214.546 93.3369 211.268 95.5146 cv207.989 97.6924 204.235 112.968 200.838 118.825 cv197.442 124.683 178.063 154.993 173.727 160.671 cv169.391 166.349 150.426 188.36 150.426 188.36 cv@1 lc213.407 102.369 mo213.407 102.369 211.607 102.609 220.866 108.603 cv230.124 114.597 247.214 115.055 247.214 115.055 cv@0 lc242.872 104.739 mo242.872 104.739 253.646 111.352 254.487 113.071 cv255.328 114.791 241.447 132.281 241.447 132.281 cv@2.8346 lw219.864 105.685 mo219.864 105.685 224.341 95.8071 224.979 92.1509 cv225.618 88.4956 231.073 82.0571 231.073 82.0571 cv@236.939 114.238 mo237.423 112.165 li237.423 112.165 239.935 107.437 240.646 106.025 cv241.357 104.615 242.631 102.939 245.749 99.5625 cv248.867 96.1851 256.438 89.582 261.416 88.7031 cv266.395 87.8242 282.747 79.103 287.004 79.6611 cv291.259 80.2188 296.635 80.7192 299.375 80.6577 cv302.114 80.5962 306.771 76.6143 307.229 73.8984 cv307.688 71.1821 306.431 69.519 303.092 69.6611 cv299.752 69.8032 295.596 74.541 295.596 74.541 cv295.596 74.541 301.985 66.6631 299.01 66.5444 cv296.034 66.4258 290.438 69.5249 290.438 69.5249 cv286.98 73.3457 li286.98 73.3457 294.489 64.7075 291.094 63.7295 cv287.697 62.751 287.079 64.9712 287.079 64.9712 cv280.163 71.2061 li280.163 71.2061 287.155 63.9517 284.277 62.293 cv281.401 60.6348 279.502 61.7119 279.502 61.7119 cv279.502 61.7119 274.168 68.561 275.886 66.0269 cv277.604 63.4932 274.104 67.8384 273.446 68.2305 cv271.468 69.4111 267.368 68.4346 267.368 68.4346 cv267.368 68.4346 276.658 61.6943 273.782 60.0356 cv270.905 58.3774 267.306 58.1558 265.066 59.6768 cv262.828 61.1982 260.392 65.7988 260.392 65.7988 cv260.392 65.7988 264.293 63.02 259.834 63.2188 cv255.375 63.4175 244.822 67.5791 244.822 67.5791 cv@233.633 89.7705 mo231.914 90.6113 229.699 98.4473 229.699 98.4473 cv@184.315 73.853 mo184.315 73.853 178.84 74.8921 177.622 77.1924 cv176.403 79.4932 174.565 83.3096 174.565 83.3096 cv@0.8504 lw166.938 123.672 mo152.03 134.947 li@155.768 136.889 mo143.019 153.582 li@0 lw149.201 96.291 mo141.247 104.59 li@0.8504 lw193.432 148.049 mo183.399 158.366 li@157.758 252.203 mo155.382 252.004 153.786 258.324 149.228 260.063 cv144.669 261.801 137.655 270.28 137.655 270.28 cv@180.247 245.103 mo180.247 245.103 176.468 246.525 173.431 250.502 cv170.394 254.479 163.04 262.699 163.04 262.699 cv@141.731 271.778 mo140.036 272.099 136.119 277.932 131.982 281.234 cv127.845 284.536 123.929 291.073 123.929 291.073 cv@123.348 282.179 mo123.348 282.179 121.047 287.092 118.27 291.433 cv115.494 295.773 110.76 306.907 110.76 306.907 cv@70.1465 245.69 mo70.1465 245.69 70.8501 252.525 72.168 256.224 cv73.4863 259.923 77.2085 271.755 76.6704 274.575 cv76.1318 277.395 78.1914 290.484 78.1914 290.484 cv@106.75 266.271 mo106.75 266.271 113.131 263.771 116.187 264.489 cv119.243 265.208 125.742 265.864 125.742 265.864 cv@4.252 lw297.387 122.097 mo297.387 122.097 285.577 131.43 281.459 132.593 cv277.34 133.755 269.646 141.714 268.39 147.59 cv267.133 153.466 272.773 162.082 278.81 164.538 cv284.846 166.994 294.279 163.593 300.056 159.554 cv305.832 155.516 310.027 139.663 310.027 139.663 cv@2.8346 lw289.234 125.937 mo287.354 125.578 289.786 120.063 290.089 117.062 cv290.391 114.062 293.447 107.945 293.447 107.945 cv@376.387 121.495 mo376.387 121.495 375.379 116.253 373.722 112.998 cv372.064 109.744 367.422 102.428 364.105 102.049 cv360.79 101.671 359.552 105.407 357.913 106.848 cv356.274 108.288 352.178 115.062 350.539 116.503 cv348.9 117.943 348.641 125.119 348.641 125.119 cv344.063 122.162 li342.048 127.622 li342.048 127.622 339.405 117.901 338.405 115.686 cv337.404 113.471 334.404 106.333 334.404 106.333 cv334.404 106.333 339.816 95.0161 338.178 96.457 cv336.539 97.8979 329.785 106.037 329.785 106.037 cv329.785 106.037 335.239 92.0596 333.601 93.5 cv331.962 94.9409 328.727 101.998 328.727 101.998 cv330.199 90.9023 li323.549 99.1206 li323.549 99.1206 327.941 87.0244 326.303 88.4653 cv324.664 89.9058 318.331 98.9043 318.331 98.9043 cv317.688 94.1055 li313.512 100.983 li310.654 97.1846 li306.898 104.922 li306.898 104.922 308.236 99.646 306.356 99.2866 cv304.477 98.9282 302.661 109.06 302.661 109.06 cv304.396 98.3286 li298.964 104.246 li295.265 105.564 li296.942 100.548 li287.93 111.644 li287.93 111.644 290.901 103.308 289.626 104.488 cv288.351 105.668 280.557 114.463 280.557 114.463 cv285.03 103.671 li275.696 112.367 li275.696 112.367 278.715 103.694 281.053 100.633 cv283.39 97.5723 294.919 89.311 299.397 86.9727 cv303.876 84.6343 313.242 76.875 320.78 76.874 cv328.32 76.873 338.494 76.7314 344.191 78.9277 cv349.887 81.1245 357.86 85.0596 362.882 88.3564 cv367.902 91.6519 372.962 98.208 376.16 102.266 cv379.357 106.324 383.103 110.096 383.061 112.756 cv383.019 115.417 381.139 115.058 381.979 116.777 cv382.82 118.496 386.178 123.049 386.178 123.049 cv379.764 117.074 li376.387 121.495 licpef376.387 121.495 mo376.387 121.495 375.379 116.253 373.722 112.998 cv372.064 109.744 367.422 102.428 364.105 102.049 cv360.79 101.671 359.552 105.407 357.913 106.848 cv356.274 108.288 352.178 115.062 350.539 116.503 cv348.9 117.943 348.641 125.119 348.641 125.119 cv344.063 122.162 li342.048 127.622 li342.048 127.622 339.405 117.901 338.405 115.686 cv337.404 113.471 334.404 106.333 334.404 106.333 cv334.404 106.333 339.816 95.0161 338.178 96.457 cv336.539 97.8979 329.785 106.037 329.785 106.037 cv329.785 106.037 335.239 92.0596 333.601 93.5 cv331.962 94.9409 328.727 101.998 328.727 101.998 cv330.199 90.9023 li323.549 99.1206 li323.549 99.1206 327.941 87.0244 326.303 88.4653 cv324.664 89.9058 318.331 98.9043 318.331 98.9043 cv317.688 94.1055 li313.512 100.983 li310.654 97.1846 li306.898 104.922 li306.898 104.922 308.236 99.646 306.356 99.2866 cv304.477 98.9282 302.661 109.06 302.661 109.06 cv304.396 98.3286 li298.964 104.246 li295.265 105.564 li296.942 100.548 li287.93 111.644 li287.93 111.644 290.901 103.308 289.626 104.488 cv288.351 105.668 280.557 114.463 280.557 114.463 cv285.03 103.671 li275.696 112.367 li275.696 112.367 278.715 103.694 281.053 100.633 cv283.39 97.5723 294.919 89.311 299.397 86.9727 cv303.876 84.6343 313.242 76.875 320.78 76.874 cv328.32 76.873 338.494 76.7314 344.191 78.9277 cv349.887 81.1245 357.86 85.0596 362.882 88.3564 cv367.902 91.6519 372.962 98.208 376.16 102.266 cv379.357 106.324 383.103 110.096 383.061 112.756 cv383.019 115.417 381.139 115.058 381.979 116.777 cv382.82 118.496 386.178 123.049 386.178 123.049 cv379.764 117.074 li376.387 121.495 licp@1 lc311.477 107.879 mo309.855 107.18 315.737 103.22 318.354 105.219 cv320.971 107.217 320.352 109.438 320.352 109.438 cv@4.252 lw315.618 120.57 mo315.618 120.57 314.964 127.069 319.379 128.827 cv323.795 130.584 328.15 122.767 328.15 122.767 cv@1.4173 lw0 lc317.76 134.963 mo317.76 134.963 317.74 137.103 321 136.361 cv324.258 135.619 326.758 134.462 326.758 134.462 cv@322.341 139.54 mo322.341 139.54 326.578 142.237 327.536 140.277 cv328.496 138.316 329.554 135.521 329.554 135.521 cv@4.252 lw1 lc353.78 125.439 mo353.78 125.439 358.457 120.021 358.914 116.602 cv359.372 113.182 365.83 109.663 365.83 109.663 cv@0 lc358.476 117.882 mo358.476 117.882 366.728 120.042 367.03 123.876 cv367.331 127.711 360.937 133.971 360.937 133.971 cv@1 lc363.336 141.188 mo363.336 141.188 369.114 144.688 372.831 140.527 cv376.548 136.365 377.464 123.395 377.464 123.395 cv@1 lj289.924 164.575 mo289.924 164.575 287.625 170.896 286.628 176.432 cv285.631 181.967 284.096 190.322 284.096 190.322 cv284.096 190.322 291.055 188.262 295.229 188.22 cv299.404 188.179 305.541 182.963 308.738 179.482 cv311.936 176 312.71 166.526 312.71 166.526 cv@0 lj294.11 188.981 mo294.11 188.981 299.948 194.517 306.244 196.633 cv312.541 198.75 320.32 199.844 325.875 199.405 cv331.431 198.966 345.18 191.323 345.18 191.323 cv@0 lc343.526 210.193 mo343.526 210.193 355.893 195.197 360.729 184.144 cv365.566 173.09 374.81 139.346 374.81 139.346 cv@377.173 124.341 mo377.173 124.341 386.362 130.564 401.479 147.493 cv416.595 164.422 426.054 175.087 433.514 188.86 cv440.973 202.634 441.072 215.469 441.517 222.643 cv441.96 229.817 440.099 234.155 442.201 238.453 cv444.304 242.75 447.964 251.843 447.964 251.843 cv447.964 251.843 446.17 268.078 447.592 278.691 cv449.014 289.305 440.521 313.391 439.964 318.351 cv439.407 323.311 433.115 336.483 433.115 336.483 cv433.115 336.483 424.216 335.445 419.28 334.368 cv414.344 333.291 412.023 333.508 412.023 333.508 cv412.023 333.508 424.632 321.016 425.931 312.479 cv427.229 303.943 429.165 291.048 426.104 288.71 cv423.044 286.373 415.489 289.429 411.013 292.471 cv406.535 295.513 398.104 307.964 395.846 311.625 cv393.589 315.286 390.075 324.822 390.075 324.822 cv378.336 317.846 li@286.008 177.948 mo286.008 177.948 270.543 194.182 267.705 195.784 cv264.867 197.385 250.357 210.744 247.58 214.381 cv244.802 218.018 239.668 226.855 236.611 232.972 cv233.555 239.089 235.02 247.043 234.359 251.923 cv233.698 256.803 236.623 271.795 235.465 276.131 cv234.308 280.466 234.227 286.702 233.188 288.063 cv232.148 289.423 242.904 291.34 242.904 291.34 cv@2.8346 lw319.617 200.549 mo319.617 200.549 315.844 203.59 317.143 208.725 cv318.441 213.86 319.943 218.238 319.943 218.238 cv@330.15 198.527 mo330.174 204.842 li332.252 209.66 li@4.252 lw318.243 210.104 mo318.243 210.104 307.108 218.337 302.711 221.979 cv298.314 225.622 290.725 233.66 288.467 236.617 cv286.208 239.574 281.311 248.592 281.311 248.592 cv@1 lc284.063 231.102 mo284.063 231.102 278.612 238.455 279.052 244.714 cv279.492 250.973 287.314 270.617 287.314 270.617 cv277.48 278.558 li@235.803 282.563 mo235.803 282.563 247.414 268.729 252.492 266.311 cv257.57 263.891 260.086 259.187 265.703 261.487 cv271.32 263.788 278.718 267.283 278.718 267.283 cv@2.8346 lw0 lc272.081 264.907 mo272.081 264.907 270.824 270.783 274.963 275.02 cv279.101 279.257 280.999 284.312 284.48 287.509 cv287.961 290.706 293.299 294.782 293.299 294.782 cv293.299 294.782 293.622 297.886 290.361 297.924 cv287.102 297.962 284.367 299.643 280.366 297.126 cv276.365 294.609 271.548 289.852 271.548 289.852 cv271.548 289.852 272.907 297.727 274.59 301.165 cv276.271 304.603 277.574 311.357 278.132 313.937 cv278.689 316.516 277.476 319.732 274.655 319.194 cv271.836 318.656 269.758 314.541 268.497 311.962 cv267.235 309.384 265.375 300.05 265.375 300.05 cv265.375 300.05 270.914 316.337 270.377 319.156 cv269.838 321.977 270.98 327.531 267.981 327.933 cv264.982 328.334 261.506 326.756 261.525 324.616 cv261.543 322.477 258.118 306.026 258.118 306.026 cv258.118 306.026 261.025 323.861 259.286 326.137 cv257.548 328.414 255.81 331.395 253.349 328.978 cv250.888 326.559 252.082 317.943 250.926 315.445 cv249.768 312.945 251.123 305.53 251.123 305.53 cv251.123 305.53 248.648 320.541 246.83 322.922 cv245.012 325.303 241.156 326.336 241.355 323.961 cv241.555 321.584 240.052 310.371 241.091 309.011 cv242.13 307.65 243.661 284.005 243.661 284.005 cv244.417 271.809 li@4.252 lw210.555 311.473 mo210.555 311.473 220.604 307.574 224.979 305.156 cv229.354 302.739 242.385 292.02 242.385 292.02 cv@1 lc311.04 240.96 mo300.199 234.435 li300.199 234.435 293.006 243.15 291.706 244.85 cv290.408 246.551 283.714 256.726 283.714 256.726 cv@2.8346 lw305.56 251.662 mo305.56 251.662 309.057 244.968 311.054 241.648 cv313.052 238.327 318.223 218.375 320.901 216.278 cv323.581 214.181 328.592 207.403 332.271 207.521 cv335.951 207.639 342.025 206.519 344.146 208.677 cv346.268 210.836 336.816 223.211 336.816 223.211 cv336.816 223.211 345.402 209.637 348.804 212.234 cv352.205 214.832 353.701 216.887 352.903 220.047 cv352.105 223.207 345.951 231.265 345.951 231.265 cv345.951 231.265 351.33 225.143 352.827 227.902 cv354.325 230.661 351.609 237.037 351.491 240.717 cv351.374 244.396 350.057 248.236 348.318 250.513 cv346.579 252.789 339.906 262.232 334.587 262.851 cv329.268 263.47 322.636 269.549 322.636 269.549 cv@4.252 lw303.198 240.869 mo303.198 240.869 303.481 254.382 306.16 259.121 cv308.839 263.858 313.477 268.147 316.037 269.729 cv318.598 271.312 323.355 273.328 323.355 273.328 cv@0 lc325.855 266.341 mo325.855 266.341 327.837 271.905 329.514 273.724 cv331.19 275.543 331.248 277.368 328.173 278.085 cv325.098 278.802 318.783 286.365 316.364 288.122 cv313.945 289.879 307.031 297.522 304.093 299.959 cv301.154 302.397 281.973 322.09 280.055 326.01 cv278.139 329.93 270.542 335.646 267.443 337.587 cv264.346 339.529 254.015 346.926 254.015 346.926 cv@2.8346 lw1 lc369.506 179.703 mo369.506 179.703 366.79 186.783 364.012 190.42 cv361.235 194.058 349.843 210.874 349.843 210.874 cv@4.252 lw365.094 200.774 mo365.094 200.774 356.301 221.729 357.523 227.883 cv358.747 234.038 352.839 253.053 352.956 256.209 cv353.073 259.365 350.846 271.664 350.023 274.64 cv349.201 277.617 345.267 286.294 345.267 286.294 cv345.267 286.294 346.844 288.949 340.529 288.973 cv334.214 288.996 326.063 293.54 322.623 294.518 cv319.185 295.496 313.431 299.014 311.111 299.935 cv308.793 300.856 308.508 301.013 307.772 306.913 cv307.035 312.812 303.681 315.305 302.581 321.466 cv301.481 327.625 301.202 330.105 299.625 333.582 cv298.047 337.058 299.827 338.956 298.788 340.316 cv297.75 341.677 306.081 343.732 312.198 339.953 cv318.315 336.174 330.593 333.495 335.627 333.032 cv340.662 332.57 355.876 326.045 359.552 325.248 cv363.227 324.449 369.706 319.707 375.78 318.587 cv381.855 317.469 385.373 308.847 386.872 304.771 cv388.369 300.695 396.62 280.94 398.297 275.924 cv399.974 270.908 402.35 257.437 404.607 253.776 cv406.864 250.115 410.596 236.063 410.596 236.063 cv412.155 227.188 li@2.8346 lw0 lc299.605 328.183 mo299.605 328.183 292.624 330.762 288.529 331.404 cv284.435 332.047 276.399 332.207 276.399 332.207 cv@306.832 306.733 mo299.516 303.837 li@334.327 270.026 mo334.327 270.026 338.71 270.143 339.948 273.242 cv341.186 276.342 340.227 277.598 339.867 279.478 cv339.509 281.357 336.112 287.215 336.112 287.215 cv@343.84 260.391 mo343.84 260.391 341.643 265.383 341.265 269.402 cv340.888 273.422 338.385 273.664 341.186 276.342 cv343.987 279.019 348.243 279.577 348.243 279.577 cv@1 lc345.168 287.833 mo345.168 287.833 338.295 298.948 337.256 300.309 cv@347.625 281.797 mo348.985 282.836 346.004 288.637 347.247 292.652 cv348.488 296.667 348.451 300.946 348.451 300.946 cv@345.928 288.953 mo344.313 303.544 li@4.252 lw0 lc303.545 342.334 mo303.545 342.334 291.544 364.609 288.743 368.766 cv285.941 372.924 282.73 386.999 278.512 388.998 cv274.293 390.996 273.272 397.053 275.814 400.07 cv278.355 403.087 292.493 409.039 297.529 409.279 cv302.564 409.521 315.696 411.637 318.096 411.315 cv320.494 410.995 333.007 407.791 333.007 407.791 cv333.007 407.791 345.076 383.744 346.375 382.044 cv347.673 380.343 360.806 361.896 360.806 361.896 cv@2.8346 lw1 lc301.284 409.082 mo293.633 421.216 li290.596 425.193 li290.596 425.193 286.419 424.532 281.88 424.834 cv277.341 425.137 269.708 428.298 267.309 428.619 cv264.909 428.94 260.294 429.558 258.414 429.199 cv256.534 428.841 252.614 426.924 249.137 425.346 cv245.661 423.768 243.479 419.574 240.201 421.752 cv236.922 423.929 235.625 426.333 237.046 429.408 cv237.759 430.953 242.38 431.152 240.217 433.974 cv238.055 436.797 241.523 433.904 241.523 433.904 cv241.523 433.904 248.882 434.141 247.521 433.102 cv246.161 432.063 235.426 436.248 236.848 439.323 cv238.268 442.397 241.528 442.359 241.528 442.359 cv246.407 438.455 li252.959 435.638 li@241.788 442.02 mo241.788 442.02 241.406 444.42 243.026 445.119 cv244.646 445.817 246.445 445.576 248.084 444.136 cv249.723 442.695 255.217 439.516 255.217 439.516 cv@244.886 446.912 mo244.886 446.912 247.862 447.735 249.563 449.034 cv251.264 450.333 255.302 448.57 255.302 448.57 cv259.378 443.232 li@0 lc253.946 448.612 mo253.946 448.612 262.321 449.249 266.236 449.548 cv270.152 449.846 281.57 447.587 286.524 446.524 cv291.479 445.462 297.179 441.738 302.295 442.58 cv307.411 443.421 311.228 438.424 313.888 437.762 cv316.546 437.101 319.881 428.504 320.58 426.884 cv321.278 425.265 319.583 418.749 321.458 417.488 cv323.333 416.229 328.393 409.113 328.393 409.113 cv@1 lc314.78 417.772 mo314.78 417.772 310.821 419.431 311.223 422.43 cv311.625 425.429 312.105 428.324 310.047 428.905 cv@4.252 lw422.44 335.166 mo422.44 335.166 399.776 344.825 395.998 346.247 cv392.22 347.67 367.997 358.666 364.818 360.008 cv361.64 361.349 357.082 363.792 353.885 366.569 cv350.687 369.347 335.477 376.786 335.477 376.786 cv@0 lc396.339 346.508 mo396.339 346.508 406.012 351.741 405.394 353.962 cv404.775 356.182 404.16 359.316 405.497 360.876 cv406.834 362.436 402.28 365.793 397.563 367.035 cv392.844 368.278 378.63 376.314 375.654 376.195 cv372.679 376.076 362.26 381.043 360.125 381.939 cv357.988 382.837 354.748 381.439 354.748 381.439 cv352.448 373.385 li@2.8346 lw1 lc1 lj399.361 366.795 mo399.361 366.795 403.882 368.632 405.119 371.73 cv406.357 374.83 407.879 377.772 406.92 379.028 cv405.96 380.285 402.323 384.343 399.824 386.204 cv397.326 388.065 389.055 394.881 385.357 396.902 cv381.659 398.924 371.706 402.302 368.787 403.304 cv365.868 404.305 362.188 403.484 361.569 405.703 cv360.951 407.924 354.896 414.441 354.896 414.441 cv351.697 410.385 li353.975 405.288 li@0 lj351.777 410.984 mo351.777 410.984 347.324 413.506 346.483 411.786 cv345.643 410.068 347.64 406.747 347.64 406.747 cv350.177 401.311 li@346.602 408.107 mo346.602 408.107 342.738 407.311 342.001 405.671 cv341.264 404.031 345.698 396.813 345.698 396.813 cv@0 lc342.174 403.665 mo337.782 400.833 li@342.706 388.738 mo342.706 388.738 355.01 388.638 358.089 388.836 cv361.168 389.033 376.364 385.353 377.898 383.832 cv379.434 382.312 385.353 381.613 385.353 381.613 cv378.673 374.357 li@393.521 289.717 mo393.521 289.717 415.027 284.394 419.524 279.916 cv424.021 275.438 446.022 248.745 446.022 248.745 cv441.36 229.898 li441.36 229.898 433.79 243.336 431.371 245.093 cv428.951 246.851 418.083 263.903 413.625 264.805 cv409.166 265.708 400.055 271.508 400.055 271.508 cv393.521 289.717 licpef393.521 289.717 mo393.521 289.717 415.027 284.394 419.524 279.916 cv424.021 275.438 446.022 248.745 446.022 248.745 cv441.36 229.898 li441.36 229.898 433.79 243.336 431.371 245.093 cv428.951 246.851 418.083 263.903 413.625 264.805 cv409.166 265.708 400.055 271.508 400.055 271.508 cv393.521 289.717 licp@0.8504 lw415.947 201.5 mo415.947 201.5 416.467 207.656 416.269 210.735 cv416.071 213.815 415.669 217.651 415.669 217.651 cv@423.307 216.11 mo423.307 216.11 420.072 223.167 419.033 224.528 cv417.993 225.888 412.458 231.726 412.458 231.726 cv@424.29 228.004 mo424.29 228.004 419.334 235.198 416.676 235.859 cv414.016 236.521 410.578 238.203 410.578 238.203 cv@420.714 241.636 mo419.094 240.938 409.321 244.079 409.321 244.079 cv@381.384 345.152 mo401.651 336.73 li@341.197 379.166 mo341.197 379.166 335.821 385.5 334.263 387.541 cv332.705 389.582 329.544 395.62 329.544 395.62 cv@334.697 370.972 mo334.697 370.972 329.961 374.354 327.022 376.791 cv324.084 379.229 322.006 381.949 322.006 381.949 cv@308.023 346.831 mo306.365 350.411 301.071 358.049 301.071 358.049 cv@271.211 226.505 mo270.895 233.264 li@275.23 227.586 mo276.109 231.861 276.313 237.94 276.313 237.94 cv@253.119 216.997 mo250.361 219.198 244.707 228.012 244.707 228.012 cv@2.8346 lw236.256 171.765 mo238.613 174.104 li@226.917 165.172 mo228.698 167.07 li@217.041 161.398 mo218.822 163.296 li@250.783 298.434 mo251.861 300.333 li@256.696 295.412 mo257.877 297.391 li@262.974 292.833 mo264.155 294.811 li@0.8504 lw1 lc426.355 319.266 mo426.355 319.266 427.168 322.008 427.189 323.67 cv427.21 325.333 428.183 329.848 428.183 329.848 cv428.183 329.848 428.389 325.745 429.39 323.904 cv430.398 322.054 431.312 318.616 431.312 318.616 cv@434.581 306.031 mo432.069 300.683 li432.069 300.683 431.723 296.999 433.394 297.168 cv434.901 297.322 435.939 299.072 435.577 299.891 cv435.215 300.711 433.446 303.038 433.446 303.038 cv438.406 297.567 li@434.459 291.831 mo435.98 293.799 li437.499 294.958 li@0 lc436.893 282.915 mo436.893 282.915 435.522 286.09 437.229 287.657 cv438.935 289.223 440.207 287.557 440.51 286.469 cv440.813 285.381 440.224 283.044 439.519 282.241 cv438.813 281.438 436.893 282.915 436.893 282.915 cvcp@1 lc439.7 270.204 mo439.7 270.204 439.405 272.356 438.554 273.817 cv437.702 275.277 437.393 277.716 437.393 277.716 cv@438.625 274.779 mo441.405 277.351 li@0 lc430.711 315.048 mo430.711 315.048 432.46 313.662 432.783 312.598 cv433.106 311.535 433.364 309.614 432.79 309.176 cv432.218 308.739 431.401 308.619 430.615 308.725 cv429.829 308.83 429.474 309.163 429.396 310.717 cv429.318 312.271 429.297 312.96 429.772 313.525 cv430.248 314.09 430.711 315.048 430.711 315.048 cvcp@7.0866 lw1 lc1 lj53.7207 118.171 mo53.7207 118.171 62.5068 108.489 63.9131 106.078 cv65.3188 103.667 69.6245 96.8882 69.6245 96.8882 cv69.6245 96.8882 73.0708 102.134 79.0234 105.809 cv84.9761 109.484 93.7798 118.756 94.1841 123.421 cv94.5889 128.086 89.7324 134.125 86.0454 136.101 cv82.3584 138.078 70.3945 130.289 70.3945 130.289 cv@83.71 81.085 mo83.71 81.085 100.996 101.837 107.508 103.189 cv112.991 104.327 116.403 102.975 122.644 97.0923 cv127.205 92.7915 127.45 84.5449 123.938 78.8145 cv120.427 73.083 108.008 59.7837 108.008 59.7837 cv@123.656 47.6826 mo123.656 47.6826 138.347 37.8926 143.592 37.9312 cv148.837 37.9688 158.484 43.7476 160.952 47.9063 cv165.185 55.0391 162.701 64.2422 159.186 67.7031 cv155.671 71.1646 143.46 79.5488 143.46 79.5488 cv@131.321 45.894 mo131.321 45.894 136.133 58.8564 138.283 61.8057 cv140.434 64.7549 147.147 74.7212 147.147 74.7212 cv@196.438 17.6958 mo196.438 17.6958 184.558 21.5234 182.506 26.4907 cv180.455 31.459 174.843 39.8501 181.555 47.1543 cv188.268 54.459 200.41 52.3115 204.227 51.3066 cv208.043 50.3008 216.196 42.5405 216.234 37.2949 cv216.274 31.7998 210.561 24.1348 207.128 21.1455 cv202.795 17.3726 196.438 17.6958 196.438 17.6958 cvcp@229.11 12.8569 mo229.11 12.8569 239.887 32.1768 242.138 36.0742 cv244.389 39.9717 246.356 45.4419 246.356 45.4419 cv246.356 45.4419 257.035 27.4121 258.295 25.7612 cv259.556 24.1104 265.022 10.6729 265.022 10.6729 cv@303.78 19.2017 mo302.709 19.1011 295.947 17.5586 292.841 16.4932 cv289.734 15.4272 280.944 14.6226 280.944 14.6226 cv280.944 14.6226 280.334 32.3857 279.535 37.4858 cv278.736 42.5859 277.596 49.4644 277.596 49.4644 cv277.596 49.4644 284.31 49.9893 288.881 49.8979 cv293.737 49.8013 299.471 51.731 299.471 51.731 cv@281.461 33.1836 mo298.943 35.8687 li@331.277 31.0747 mo331.277 31.0747 327.209 43.3081 325.528 45.5088 cv323.848 47.7104 319.366 58.7104 319.366 58.7104 cv@328.079 23.793 mo328.079 23.793 332.522 24.812 338.135 27.7915 cv343.747 30.771 346.777 36.1909 345.9 39.0522 cv345.021 41.9131 344.049 45.2822 338.732 45.9629 cv336.305 46.2734 327.006 45.2847 327.006 45.2847 cv327.006 45.2847 331.206 48.9736 333.052 51.6904 cv334.897 54.4072 339.249 59.0376 339.784 61.1885 cv340.32 63.3398 342.535 66.7749 342.535 66.7749 cv@373.993 46.1787 mo373.993 46.1787 365.711 59.9385 363.457 61.7485 cv361.203 63.5591 355.521 72.771 354.73 72.6035 cv353.94 72.4355 359.793 75.1626 362.545 77.2642 cv365.296 79.3657 371.523 83.2505 371.523 83.2505 cv@365.953 60.0825 mo379.011 68.8843 li@375.01 44.9746 mo375.01 44.9746 381.461 48.6509 384.002 51.0273 cv386.543 53.4038 391.071 56.0186 391.071 56.0186 cv@410.359 69.2378 mo386.781 95.3384 li@401.293 109.034 mo425.082 83.0176 li425.082 83.0176 422.517 105.478 422.439 109.453 cv422.354 113.882 421.559 130.658 421.559 130.658 cv448.737 106.984 li@452.866 145.809 mo452.866 145.809 455.93 149.844 457.122 153.415 cv458.315 156.987 459.611 162.768 459.611 162.768 cv@485.577 184.341 mo485.577 184.341 485.563 186.073 483.977 185.297 cv@452.71 192.97 mo452.71 192.97 468.843 192.564 472.775 194.261 cv476.706 195.957 489.976 200.381 489.976 200.381 cv489.976 200.381 474.406 209.929 470.667 211.912 cv466.927 213.895 456.719 222.699 456.719 222.699 cv@494.516 221.367 mo493.045 223.293 li@495.098 234.927 mo495.098 234.927 495.282 243.874 495.542 245.815 cv495.802 247.756 495.092 249.827 495.092 249.827 cv495.092 249.827 480.279 250.276 476.1 250.616 cv471.919 250.955 463.957 252.763 463.957 252.763 cv463.957 252.763 465.034 242.165 463.804 240.354 cv462.573 238.543 463.009 232.777 463.009 232.777 cv@478.994 235.355 mo480.496 250.053 li@467.122 283.154 mo467.122 283.154 457.994 287.12 455.986 292.603 cv453.977 298.085 457.826 306.735 461.012 310.04 cv464.198 313.344 473.027 316.166 478.873 315.356 cv484.719 314.547 492.068 306.125 491.454 301.736 cv490.839 297.346 487.553 289.608 485.691 288.623 cv483.831 287.638 480.144 286.129 480.144 286.129 cv495.697 285.28 li@448.037 324.619 mo448.037 324.619 464.833 333.043 468.07 335.079 cv471.307 337.115 480.986 341.606 480.986 341.606 cv480.986 341.606 461.438 346.615 459.055 347.455 cv456.67 348.295 435.748 353.32 435.748 353.32 cv435.748 353.32 450.538 361.52 454.6 364.186 cv458.662 366.853 466.006 369.848 466.006 369.848 cv@426.217 365.738 mo426.217 365.738 437.492 373.913 439.968 375.804 cv442.444 377.695 455.855 387.066 455.855 387.066 cv@424.265 382.158 mo424.265 382.158 413.814 379.448 411.191 388.383 cv410.141 391.961 414.375 398.414 418.437 400.062 cv424.389 402.478 430.695 393.26 435.28 394.101 cv439.866 394.941 442.529 400.072 442.919 402.984 cv443.31 405.895 441.052 412.354 435.989 414.339 cv432.563 415.683 426.689 413.335 426.689 413.335 cv@396.875 401.555 mo396.875 401.555 409.811 418.836 411.316 420.857 cv412.822 422.878 417.479 429.965 417.479 429.965 cv398.647 428.262 li398.647 428.262 388.405 426.149 385.508 424.809 cv382.612 423.468 373.262 420.248 373.262 420.248 cv373.262 420.248 378.422 429.463 380.718 431.652 cv383.014 433.841 394.908 450.33 394.908 450.33 cv@362.176 428.429 mo362.176 428.429 373.883 444.565 374.048 448.433 cv374.278 453.84 373.138 460.674 370.606 463.985 cv366.4 469.488 356.253 470.318 354.435 469.848 cv352.615 469.377 345.779 463.141 342.543 457.62 cv339.307 452.099 336.073 440.87 336.073 440.87 cv@345.961 437.049 mo347.497 439.094 li@352.627 432.944 mo354.343 434.693 li@336.29 479.558 mo336.29 479.558 324.563 458.794 323.463 457.953 cv322.362 457.113 316.383 447.707 316.383 447.707 cv316.383 447.707 317.456 461.254 316.796 465.541 cv316.135 469.829 312.651 486.43 312.651 486.43 cv301.996 469.968 li293.787 454.986 li293.787 454.986 293.421 468.646 292.607 471.993 cv291.794 475.34 289.492 491.535 289.492 491.535 cv@267.587 476.113 mo252.477 476.382 li@205.876 453.361 mo205.876 453.361 217.332 452.589 223.422 459.42 cv227.229 463.689 227.706 474.475 225.386 479.285 cv223.066 484.094 215.791 489.757 211.539 489.559 cv207.287 489.361 194.263 485.599 194.263 485.599 cv@212.515 454.187 mo202.24 485.109 li@194.443 448.986 mo194.443 448.986 189.025 463.133 187.807 465.298 cv186.588 467.464 180.97 481.375 180.97 481.375 cv172.947 458.941 li168.081 440.833 li168.081 440.833 157.479 463.187 156.703 464.772 cv155.927 466.358 152.484 472.557 152.484 472.557 cv@142.235 466.866 mo144.768 439.475 li144.768 439.475 147.613 429.599 146.208 428.525 cv144.803 427.453 139.669 432.968 137.308 433.778 cv134.946 434.588 124.911 441.392 123.035 442.137 cv121.159 442.883 112.669 447.959 112.669 447.959 cv@125.331 440.841 mo125.331 440.841 130.151 445.982 132.627 447.874 cv135.104 449.766 144.52 454.565 144.52 454.565 cv@114.828 402.764 mo114.828 402.764 106.118 411.887 104.857 413.537 cv103.596 415.188 96.0332 421.798 95.6553 422.863 cv95.2773 423.929 87.1396 428.689 87.1396 428.689 cv87.1396 428.689 95.0967 433.924 97.2217 435.982 cv99.5596 438.245 104.216 442.138 104.216 442.138 cv@63.3872 403.334 mo63.3872 403.334 77.4175 393.887 79.2935 393.141 cv81.1699 392.396 90.2368 382.24 90.2368 382.24 cv93.3311 379.328 li93.3311 379.328 97.3555 383.757 98.731 388.291 cv100.106 392.826 99.4443 397.113 97.2554 399.408 cv95.0664 401.705 90.5903 403.514 87.9688 402.383 cv85.3477 401.252 81.7563 396.767 81.7563 396.767 cv81.7563 396.767 80.0879 399.461 80.5073 402.395 cv80.9272 405.328 80.9893 411.521 80.6992 413.043 cv80.4087 414.563 78.8594 421.551 78.8594 421.551 cv@85.6777 372.177 mo85.6777 372.177 80.0005 365.228 79.0454 363.627 cv78.0898 362.025 76.8174 356.215 76.8174 356.215 cv76.8174 356.215 64.6602 363.578 63.1245 365.019 cv61.5884 366.459 56.4155 368.607 55.0674 369.803 cv53.7188 370.998 44.2476 376.207 44.2476 376.207 cv44.2476 376.207 48.5225 380.145 50.3687 382.861 cv52.2144 385.578 55.981 393.604 55.981 393.604 cv@62.689 367.3 mo70.4492 378.937 li@37.7363 362.712 mo37.7363 362.712 55.5391 349.16 56.3799 348.059 cv57.2202 346.959 67.2412 338.399 67.2412 338.399 cv67.2412 338.399 55.335 338.02 52.3711 338.416 cv49.4067 338.813 39.897 338.084 38.1011 337.584 cv36.3057 337.084 28.5537 338.616 28.5537 338.616 cv40.4956 327.604 li49.6533 320.176 li56.8555 314.739 li56.8555 314.739 47.793 315.706 45.0264 315.335 cv42.2603 314.965 30.8516 315.012 30.8516 315.012 cv16.582 314.18 li@11.2397 250.139 mo11.2397 250.139 26.6953 254.49 30.2368 256.758 cv33.7783 259.027 48.1772 264.314 47.3223 263.662 cv46.4673 263.008 38.7871 268.563 34.5352 268.365 cv30.2832 268.167 13.5835 276.853 13.5835 276.853 cv13.5835 276.853 23.4565 278.247 28.2437 280.596 cv33.0313 282.945 51.0874 286.234 51.0874 286.234 cv51.0874 286.234 38.8877 293.082 34.1128 294.709 cv29.3379 296.337 15.6948 303.872 15.6948 303.872 cv@16.6274 197.776 mo18.0981 199.335 30.8291 207.315 31.5093 208.706 cv32.1895 210.097 52.1538 225.779 50.0825 225.069 cv48.0117 224.358 37.6299 226.543 34.124 228.222 cv30.6172 229.899 12.8394 237.715 11.6362 238.15 cv@29.6982 209.937 mo28.3076 210.617 26.1953 217.375 25.0649 219.997 cv23.9336 222.618 25.1914 230.159 25.1914 230.159 cv@51.2617 154.199 mo50.1963 153.821 48.8174 161.963 47.7017 162.854 cv46.5864 163.744 44.8931 173.382 44.8931 173.382 cv@2.8346 lw0 lc0 lj53.1641 100.493 mo137.649 -10.1318 295.813 -31.3208 406.438 53.1646 cv517.062 137.65 538.251 295.813 453.766 406.438 cv369.28 517.062 211.117 538.252 100.493 453.766 cv-10.1318 369.28 -31.3213 211.117 53.1641 100.493 cvcp@%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (Anja Kiebler) (AHA Grafik-Design)%%Title: (Logo_JVAM.eps)%%CreationDate: 19.04.2010 12:51 Uhr%AI9_DataStream%Gb!R&q-"Hfg-4.:OE1\:A.CI-W$jG-#_F1tL]O4oOC/^V_]QY2l4`@plfYu`-)jkD.[?fQn*fT.]j?Al<GR!EBpD;kor$NgD=-M$%rLZ_Ob:=Kc?aO[JkaHC_<8,&LW\u(rb,42;BNI)d;qfr:_fpM(^aU34^KRgJ5<Vt]Xi!X,]%Uu'eaMg`k#-3l^2eX'.';jgQ^bJY%e]iF#U!bE:AIZt-j)XhWpAX4Qe&,1nYuJ(>c,OhrP+S@'.mL(-7K0G2n'nN/T5LZadV8Adk<WE5n\W!#n&NsZ9;X88l8#'@rU\jQ%Ve3"/^^fF6nDEl)_b.7<Q&.?cWjRa&eb-uJ_rH0A<TSfAh^_lbhYoHI+nOl$h'h%CL[A78dkeCP0^nE^<<(fUs05PYY?]u9>4q#2%[A:^pCUG$1NRmXe^L_Pr0-+/LH@#4*?Yu=_DHgib.m(KACqkEt]pEGU^>6H*@%A59e%7hEK9);;cY?*JZ$u`&\ujSMMP_0%P-*TA%r2Y^M1"?7/O4Dt)qC-'h@/2\rjBu,r=14t@4dhu%E!Sgp'+Y;r3M<O$73C`eh6lPM,S&p0%N;f@Dei"C<]"rA<*P@:S*iiS<-da6%k?mpLs823`eO3unX]DhFm#8a*g4$LQ9e5ZSbEs6VS$i(pN^+_^Zs&a2"X<F$5LmBkmsH@P5<Z"]nF+QpF_NGj-%-Qco8Rs>GlK%m%[Mnh:a.:qFH=;-]VLDMsIVdqQIhiQtITN^W1WAUDX2i@]ZW[b8\o@RhgT$Pi[uW>EI2u?l^B@K8[@8MWk-L?,chm"pork:I:[.*7%;mXpKpI"oAl!@Q[h>XN/oJ@CI`pkp0Y>JPA4>hU'5M#/pSY;&cX8fo9gcsZHRaq;V:qc<]<?$/^Y!2g^+#f_*7RQm30;TWe.K=Ea%X0j&Dea'gUkHJ!t^VBa#W'('j]oJTXDYJQ:G5CS15<A8>0B&!3<]d6/B]pOd?\hjm&O5\^XkEPX0VVCHjO%"^'DsL(lhFft=7uIF%k!Ks+6Vl5#WUP[grjW\FD%oPt3rNH0+D8RUWi^c["O`!Vb1l=h=c(@KonRqK`=_cbql=/:p\0(]VXqGKE^9.oG+sO8Qq@Ru]!'U5%N?Y!=7RGj`SQ^$2-88H1CYetA5#grA01!ne)MR[(qR/&2>)2A4_Ep;W*r5tG]`B?qrTdbmM8e:Sr?!or;-YSEIlVCHC,_Etc,E@r%nU9Mm>+@5s*oDj>:i3\hM?a;:@)@-YgJOZhOEV(L[]C4ir[!',P@&d^UONu[idUF@KiYjKVe8L'nBnS3_BP=RHs%jMb!F.aS=qL5%426?)4I#4IN92AqY6mkl%]7`,oLV?(f7h,mc62MgL=sGWgLdL!hte,)(8Dk8Y,PJ0Q-deU'g.eB+qG>J%jp%sd+0_L8tg@;f`#*8%'7\hE6XZoNrh]TXgY[?2Z<-D9Qc83=52=cNon!b'`pM;TX"+$o*_f]SNQV8[?0'@^W7CPo+cHjQ-/'3T7D[RC>Pr15l`mJH:;<_b%0E5&kc'O#)a3qRj6Tn0D<plU6D=P9,d&n_:V4%QDC%hJt^N=\&DQ,nc))auC;+/h+gkNX,'Q-)6hd'`o?;$`-G^]=/&\i4hXKC;6%VrJk?om5og1S*iKjm'RK"n2bgjSpPp?i$60e^=$(%)l?*2(]"3>tXg_K>SuI,"6AMcP+`h'cd86GTh/(+#K8_5@A3sa$9P.F6!9U%)Dpo$YQ))\ikP\4'c2q2Q2BXMr[Z1Vrp.<nH>UnUqhFPM>0T9LDd'o]X=.cW5@@KgAdhknYNkN$?WedbVr`DP?%RR,om4c4Y3ITI%U3kE4/S4Y#ZF'ULrk"(f^(,S<g&3]?p&#oJrCQ^ClVEN+._RnCFnRI^lG#K9LMEl1,LXrKoC0eja5fs&I`MRcTuK7Z\?_mq`PY0Q%=`+)=(-bk"fd^mpgpS\6\+dA6JAuB@7+o"Yo:Q2]\6#[.I&d+G((]_l0\FXji1(g8IpKg-W"u8Z`f\<abtVgb25Q(#o.DfAk$u(>%BiV^Y%Ih/M,N[21D7R"2Q(?pW;la4eWk]*mqsS:\HS22/.E1%R*=faA'o`-tPJ,V_ZJua*NCp>K=HV(Er`AW&j7]A&lu]7_g/T&n%X*UU^;nRkV/Kj>5AU'&KMM;Po51P3YIl=<D!#jLud8l#CgG\H[Q?m3G".P#l0`>S_[ahsm2QF(75OQ9)VU9dkrO`C:A/rercF@UV%!FDhZ[7;J^cWs7eqta5a#-YM09XhDf&7M1-e`O'\@93GX`NBk1J3'gqMh@qYUNDq'9kZkBnZhX5PA]5@4Pa)M9a:#fk8;'<V\O]'%[c+KNJ+^S,`Zm$qc1DOLmr';EHg#&@PjX%D>akU1)#ci[n,Bar/N-gmqHYsgj-GdZ?m8d1#_\[*\9eU5X4Jq+lW*&\;S2?n*SKfF%HK1lKdn^a:Msou6@:".DC9bqf(Ot&?b)\l<"?Cs$O>5IjH$B.1-.BKl-#1h>NN/L7Z\j;Qkq2"A5r1hALSPW]pilB]pb[k1;Vt(B%`EKs%d`'rZ:U8iiD>0;)Xc0!9\.hmL_[bG(!GL$cTK*>]9jcA%!!&%CTV\R:`t"KH>s(qX'QPds.e$OLK1?IOWn(C6b0;O-]i)HK%&3:8SeOOtR_Fd1D6j=G*8<6I0+9fs\il9qsr;+<h;p@)$:,O,:H0VH(ee_"EZG6L>'o+Nq&*4%Y+Td2LG\Y_MX2UXi!s'Nqq4$C+%_:I"ki<i,Ie8DIdAK5kc-]a8`O5'Q?!ZF:b9XK+MCF*I0qb\X0qVbd1#TRS]DuFDqE3D>UD8(VL<UNfs)YFQgCu(FrW]qt/pFU9(%B;"nbnQF5Q/":,Gk4&XgEF6mOWQ1LPSL``3kDQiUI=,i6c-k>LUBeYmDmr"mg+K17H^9fD.]g,EM61Y-]N)Z^'eik8<]q!9CsP^l%g#rq7R9Fo@V2,>&^1%fdiK=-k)STF'GXt%#oMH!S5Q/K)8+nLE;0^8^\uPf*dB!gop++Rm+5,"u@W=H$]W!f-J(?)410&-Xil4uk%Ae&VoU+<51.a>$KejJOR]r>bqLeuY'pk'*(%^1ACmMd<1Rag?.?5&4PJsMV+EjY1h%9J@F9PN7k.G#MH2?WXn%=a1An>kF@GCUM:%XXKlrqhfqDNr$)P$E-7[^ELEK^/ad9EaN\X26boooJJP1+7HE5PtX>@S*O66%H+'W9D%5PHC2?/3MlVqj5>=kg83$ln`Req=]BZD%9[bCH=u?m<OU5pY>Z(,G&nUl.!5<U1lC_G9Lo9cV.a.l:<%m'bT=Ct>i8UmYob7gH'BfJ+,'=E0#'EMETE0;2#)*,&<G=9gcEXt_%TpHolPbE(I[%p!))ZqL8DsK)AEY=idI&GXZlO8b7Zd-oU2!YRP_m>B@d3#bsq;sl3S>nK.N?@gs)D+Cak0m<LgW_\`BZe'eXkotk%85n.FK^.&6[H^P=[D+/3Q:B4$L&!RS@1qs\n^Z(b]%>>6V7j6\_C=l@^FGu<<`=/JNN+QYq_adGk?qbGlYYb'EKP`7Q?s#CVA;+h%Zt`#)0X[miQ9V,r'A<U02It0*D5XH\kq.U'V@HaY]M9V=CsYj982du'MR<`f5Q>r^*fr^mV1WmCUiFjs%V@;/p#E#pST=Y.9jiil%K>7J9_J^p3>2-8#Dr5!(YjTnSB3ArX$s?c>)C;(*B/H6Z`l[of/^]*q23#98f=SYGR_=9+kX>Xpiq)lU_BPS,T0S`M3F:Inna,ou%p)1Qh/_fT8esh<\bM(4!j1"r-g#%8X]DKHMoh<^-lo]ZE[IAUNmX?q!S'Yg&QdrK5A%>Ll\j-.A[JG=O_og,L9ttrK7R-Rs-Z>S7%$DmF'mB7?&m###R-e;ln=AAD_LUf@A=,YelgqI41qQTV?I.OVN])KV)]%`f=H<j\RTq*i\hAUI=O.9Pj;i`%#9[*P5]fe)o>qSjq%?f$0uQo?pa-`4ABZ5,P^0:R=f`8'qLa&4V6YEl`s3.:C<DRJ>KY<#U#Xna3cAl\!dFX:qa>Zu4.@VX_d>(3p*(PPbr;0fG2D&I7=%\%g%W>PGFSkNhM8m55iBQd+"!f6_F;>I9Eg3K[.IhH&mbI/@>u>!CEG/I1*s(.sRE[Fr$p(@PsTH#)DneMN`lh*J1>d;^aPcu4o%%b?r9rK>.>&s-\;b3,#!")7K([q0\Pdkk=*9e`,ce6!m?6Bhk7k+3"an-oJ[KYG[\Qf"SeT>O1(fC[5!;T_>SBkARI#pd)%R1Mp'[%h<1F4acWtpgUqNt]14[Gis+$l5CQd3(t=s)*?MDc`!n3Z,/\l][O+52`,>(NXbF5_4'1OM\3V'@Ioi.Jd)2i^aI/JM>PC&rZqqBs%]\;R4eape7na8OES`rAhne^Wbrn<kNC=T)3?@7+-))l6&`*r'1K4cbG)`)0(na/d01h"bUCSs)PR'D9%="[/V$4>7kenqJejh)X!%kc8@FbpiBU,AtlJds&J^1]?IZ7:]44KqS)'j\bAJH)d'XSj'dVK3IGF[*@E.LTr@X[e\jJXS;$&$Dk8?C7FnNGDUsdfKZ<P,n4&.%[Q[B6NXRD4W""4U8LrUKSfZ(JmUKeSk1%tY)%:i*0HD%\rc<:2U^#ZMHFMQ`kiZMoDoXeJ'H))&Dlqc<Ip?d^N>4CN[eK9dRQ.7T%^[^\@1+5TuLAdtig`INV&%XjqH+,>>IdE`JqkfiBkh_W5CQXOoXn@UKIG?iS8Jq*!FhG3V`Jko1<,:;Z"q>f'L](>'^\B<nclMNG%gXL9ATR6[fl1Dpk2mJ!a=u^pR=IHPI:FjmI-^+bJeNV<orY@`^qjm$@M<ijZm\#83B\86DBD[O<hC[PZ]h947lPo6G[hUEBd"AlA%L!o"_OS@D8IQ,TM'*ir/rbZg5IaD.0'91#oi>i,nj.N]D&61bFhTe:U?<taI97N[8kt/(L#(te.Z]RQR>e1FT%P$7_HFmgd1P^#I%9D-j?L7RcXL$q5YQ4@g,O(?VHc0.bYhEPbkTWL.o&OKUJSmNtC0eQX&n%coZ"QG'BZ#R(+6-K5&YV\(7ST`=jd*8I::OTpdn4=)c%7c.L-$sG&BqtTTS+qWn+PJ+[!TLPt?@B?l>0rW[4dSoc'n$D[gZSLaVM<OXk)B3a7SpL1Y-XBC_rm$Smqrh8UH=nDkXb^fdqma+P%b.i?!U655Y[eFtB9De*j*s(7\qKSG!p?)6p#:j<@mn_a=9R1D:0.4LtGe3e.IG;5@g@;02-\$RBCL]6tmDl!u6/:4&`u;(*UWp6U%cMIq+M>O4Lp1kA)[*tX_:W[N>4[4>Nh6E@AcI_<F\(e[KPM^ht^W^iXp@$YQh=O#(fAEI-Z]qp`^K'=N#!4.?I!IaBCY_$WW$K-+%?2ei,r-$W"XHXaSh_1JljL5ADQ<koP?$c$C^J*=cM&15KG5M5L,Pq-0rpj@lm8]CZ9c2U\6grdMJ0kMIT'09!,Y&kdmmWn2c+J?:%qQjN:LeHiC2>HS9]/LbpJ,AoZofIS=Fn+:couZL2j7P?P`ui!KM&/tYgQp4I[u7Af[EZ%]Rl=U^9tH^^lAX=p1FEuW?XM(!+[4Wl%MZ)\9LUK(3),m^L(R/_>9r@+GQRC$,l209=aX8p5o.EU?h"PP^g>_G)-SPmXf8j!QK*oS(dLuj#8I;t%BS43T3g7p$/eS@Os-bpG%#d9;$7(*L792-aQ:hVUKgOjD"LBi5b0bYVX3e#p+'H5l&D1pJdoA[`"BS.JcG6TpO#.8qH^;#^Ne=*r3%]Uf,k<3U_PS4:uI%N*k%BRD#]IubOJBmc8(CDDit\W]-(jSOTrL&$YN;!H,gOgUc&,nK:Sh`X[T'J`&ER6J[GGm2=9].FstZ`b2*>5#?[f<btR[-t=o.m4Rn%W?m7t0"m?(T3LT=I`.f:hK7!pbPp)G>+oJ#^!V#-0rE[ZmYB!W)tTaFCC@Ia*HaKK4it%*/iLhKg+soLOSlNs]>-mT/eQMW'0&":%5@4D[Sn?^Z-m:NYh"h#mjK[Md0X,\VT(^G^Pm!9?%t?!+Q'.!Yk,WB@RHWBiW_&9EN)O%gr)I#UiQ#JADj4MPH&8'H=g5!cbIV#*%5.05"_!oW&05m),+7oC&JQ(9=G,I`f006((IJuX,a,_l^X%G(PK@$L1RGQR:[,pi\FKBMkhUS-KSaT^Rq>B@BhOsQ#8(.44[GV1c%Su&&%IfM\tKsd56og(QsS6oJ:)gm7"okDt6e^Fqr`N9L5qsg47mll^?m'QK!W9YB=c)j)NlX`(ohg,(9n,-a,.*MuKMQrZDA$,Z?%eBR8)4b]%mH$QibphZ&eKE_^Mk(b-DkOT-@U#h/;FJdj"JQh`Nr'C^$rHl!SD0[L?2O@3<6J;+r6Ss'L@ILpI(`,uK]CBDn(+YZ`%/Ij;W(OE?,Untb-qQM'N1t_Uk=>]W$=Hp29Nu`8*[]6Ic(W#@FJ\>R*!4Zrp?!eFu5u?^\E%Y(HV(aRlj!aGbZlf.No0Er?ZRpl/%gr?.0l.'L"%=Tk:(Tr]TZ$U;gIeMYJ3]9TC&XHdL[PcZpFdl[<CS/eKG^!^]V4Zi.mGsGg$i^O3+PdS`<3Yr[nlb$=@udmkN\b3Z%DSns-oJcZG@(<PP>.&LYa=2i+F_/iDb\Q,"0!\PVP4smLl>s0+V6H1/;0$-lO_dGl+Xhhnf!^F]5gj_[V9c=DhMc)?4VD7u'Itto%RbrCmFFg*'(]-uei*nJ;Dbm?k.BE*J'rBC3Wk`B*frWj\j%TM6R8W]\dZiU3AeUUGq+JT#;FJ*KUCPR]3PRmpO@Y]fo7tZ<0.!2s%Tp53QgRE>s0K_$'8kGSmMEF6l<i<";6LlmemS(fFa7MK<bfF^bk'/s'YiPl3k5,nFTA/)E<+R;m`C?,QNRbA)FLiW!;HKZRa+Ms4%M9LiO4BDI:Nb[RK@qFuNo0G(]V^U$S)S8)5;H@eP4.EDQ7Et#7fXmnY/!hW_1c[*c*$q]JEcLl27.bn$-+f&$30>WKL*bKrHP2Gm%#>_-S\g*T"3LiiNH.L],@8P]8>n^1(Vk:+2c@qT#KFnAN^6r;G#`=+7$dJ@=q6Mro64t.Yaf+`V-`^uf(ka"Jbs.%I54b#;-2l]B%M#`@-&5.HKo_g<Di1`+-@]8rGlMJ>?bVuFApTmfbj=UBhO<[8h[TAd`XC-fY]u9RY8j`WEp1*C6fb!k95UZ$Pp]UFt6^e`g2Tq!1%0#lSGX(HN]fsb)r'\D5",:IFnpE-"3.qt1j?C>>]H[+/#igFWi@:!Y3?^cG83hNKG`Oi)HSn'!i1"[cKn?,iAca'oAatHDoV?_$^%Wd3X`?%aeb@4\b@8)W=)=/?n@TQgcD@-:<=.iZ=mo8_,P?7n.i`r&r-rg^gqfVN'a()uTM/N/6)Vb7AC/.GiuLa+SH$e(0K'W/2I%O<@.'^:ZIoRiE*?*d:P!>r%PZ&<(Sm_c.D-Lgbr7q"!QXBj?%2h!O3RB!7_pN@N%<9);A'*ob7H8DigpHm:5AbOSPJIH^lBl,,nB%[nA%J$==E)`lYG>K4W_A^fZ9?-#fS0Z7MMG^!Rc@K#k*Bn.%j2/ofi5)IFEM>E`R&rf"qcHG%coB1j+#0\P=:e(*d8fJNEj371;0%J^hIc)R!E+/0hain.6\3IRK;<Xe2Q=g"T/nPeE\t4V]]c,kdF]o*t7iYcAiF@$5Voe6/tX*,aWtLqJRWjTt#@C#W:_?Kb)+b&.FJ%Q0<$BSItSmq"hG)HS3@HW3\A\Hpcn+.RcG$G:?^>'R?,\7;LaKI<b8tP&uQs$*)'3d?6*Nk\Mo)Efu-N0f.p1@SH3:G*5VJZJrTg%g)(O+kO`hgB[TN^7>nGDA`tKHh^eTgV.`#pQOd@d::r.)HXIC8$AfPK*nOi5Pk#Y\Q1$MMrSmb.Bn+@WW".I^o>br1\r]?k`ISMl%N9Na=#PY&N@mm:[AmQXGZ-W05RETJprL-mV8[OQKgj6l,7Ni,:5n&,^rUbe/`*.Klp[^7JX;oRp/L9[q\Bq!=1d$aRA.=>:9BCn8%s7FM/ngoM3G,XLVged4eiqOGLRLkXgF9\&]R^L.KMC^HIKc<Ws=39Y>ZGEC?g8D%CI6&1.F3?k`7kahRE-Nu^rM7U1=h,CG)-sre%pX82X*L])G2uJnT:KG-4:`>'-0#V_HZOB-MKoFgVZB<!5_kC#6X,hK<0s`BO4(2a[Xm@6BP/Um)#/-HBTHe*hDX$N>!.ItiN8;q8%?+LJ.RF:ft=;DUsU0M"_\lbOM8hE?3=dgt@R'(dfklt=;3N3]<*K47?Q?okA"MOXLdoCI*-*?Q+'U:H,'U^7fX`n(`,@I]tF<Go&%K$&A!dC.J+P4p<(n"rbRd@%_\QNn(/2)EsM'79mj87!f"AdZ6]I,YHq0]ED%-2em@(c3Oi0ha(90Ut"$23?C.&:8;XB$leqkPk8I%_d3;TH$]C3Z*h0PdJ3G31-LCF4bKmh?*ktDC(=Nq#+a-%>]T&V1[#1BHueH!1[$%9Jg9I*V.\-i9)7PpV.\0&VNaFX?$Z^GX<j2Q%\sPdEd]s$HbFqSTTF5>`NKlkthQEF@5&Lj9H3W1jIq?V>\c`+7&<:#:QjNE]ENfWfQKiefJ3l<f3_%dpT2`6JX[SNOW$X^]6f=0W%".MZ3SC5HEO=LmMoFB`U"R1+N*4_EjO1\9/a`1p`W1-KX<:=Dj0l^h&osdu*W/kkfIYDe"WMcf4)k@s3R!F+4K)6t6A4q+CR[tie%?qT8!`u"E"_0tjChERifQE-6A7;0q".<D%>V2PDdnT?3674-^Q(X`#lD%,udAIXM\?^SoHkoFRuQDL-b80rRZ.&H*]7>1Eo6U?h!%2A_4'*&6,`:aej=9.uIaL,DuMjLq/25@t?/8_obE2$@\464lLr)7A7==,!6_M;`i:fmY*=Z8kH'cUa6YZ`:\@Q/9Yq2oS`nQk>KT%4*c4'1*eP?'@3E-b@[UGZ3M8me;j2?%]t3WrLMOW-\E`3Z'&+X-(?pTAt+sPeg#9rRE%6/_K^l!5(>is$UAnsI7iQR2d<u#NlfCs%K;UPo&d.#S]PImK]b\hCWJ.<sI(^<>1!U:A7/^7C,BfAT"X1hYLZg9P7Adi#7'EP22B]#K\/cNM1Gd6!PJRAjg9C[T&-hN(`$<r=%rY*PJ=ZuYJ*kNLE2TGNT>0B]EOZaaCqm5Bn@]foX0qa]NipG]mc6!-E+'6efUgnULAT+'<?>?U3Y3[,]MJWkN&$l@SYhO0:;3F\#%5b_LUcH*d7>&L4uM>)f_M7AT\[m@MgBKuCSq+'+u!BG2Vbu",=,fp2t)MI:[M'?Y8MH"n5N48EQ:9PWt8BjiRoFX).,:&>:*]L'o%^;U*sjI>Cn=FNGs4Ef+%AOpR\JFP]5j%c[<Q>N6tF&Q5@F/XP.bW`/<L,89D/WKJ/Ph`ctQB<r!7#Oa41aH<9B9>d1YT(k31H6g9%X6$?oT6`(Ek&^Q?Z.C2kY.o-M^J:-7,%EfDHBuNdOWL@mn1H)HN*sqhCpo8<()^8D5*`XbX:[i2n&DWR"I]MBcn\%@%n]3I\&cXN%%@;f-P!u7gO3IO7E@iru(->G_pYb\6G=*\>`,Od.*pV0^/"27ik+n4_SK/H24-a"H;O]#R"btj98LGrb-*s?9\=910=<Wl*8!Z%r%cI*CPmuA'gf1d>[$sb9G1./"1q5F+a+Ue3cL9T?)H$0(:5f6&%@Uh0iO<iO3H[!LN,IoE>W&Ga<QG&m>j$BAbfbe!R+)\0+I@9]c%$De.cF^sUPKjZHr&N<10GAKIun.D[qjMSr*W1oo3oAN0b80'$!DIBn\0)9IN`qqONo$3#C7Bo'%DC@q(N.qZ7E21o+)*T.&\=XU!%QWH@U)_67kij.abAb,\tI'L.j,uFg07qp6l'a:.*P!JTk8265I8L`(jL7$&5).-\F4k4&-R]@]%BJ*4/A9p-pq\cE87:IpKD*)>Y%'/c7Y+[0*W(]##I(27]?.[01]%:Y_LSpTIfcQA!sO\t1R/nc)YC$;N[2dBtF&3a8T8g51FNZFSDoi[ron^6k(0i<qU/rbLAcY#\a%82&A,_>3WKOM191i@))q<'S:addbaFq\`_I:[G)X8o_IT.l#K^Oc1^qN"iJ/56LJqZA!L>IJo@&7]QH(5S98i1/ddXR5Dr8)6*Hg%/!#Y=b-Pi;UmjXfWLn4Q8H"cO7d?nA1/^?uP`bekHPu$5-EX[H)<a8fBSM>>#TC^IJOV9C8T_hE7GA<A$CC/sb:=<&fp"hFE9W8W%LoG?uRDQM4_@>;*>Z0OZ=,)pt#'Vsl.NG54LFH.d;CYpd7)Xn\E;bAsHu=(6)<&sn_F#M*;EQ2AkLCkN$=3+)`i(A/2Y=s%$+=j9%Y@T.nQmmC,c/_O?5`+If:UYe,X(eD1k=,AY8l4mTk0R1($^418HBFUUFKlX+`pq?=ISD1L"(#Hir&M#Yqf"PMJ,4"l@U[7R2R2bs%hj=rYAduMGith0Gq!f,$M8,OI?U%`3%pYRf57b^_]SK6ApoPnIXO5NjiJ[;R1R+tR`f_F9FnY*g]'hL2fr_muL7"Puk?]#j59p[&%9MV0AhLA,@YWMlTQL+<,/]7"sqr>U\$`+[9]?BN9%(i"9qoi*%6\@k2MjsWEm?0lDs$".]cQ>2`N@)9.-OqW\q`6=H:>>EKpYB8Q%p[K7e(uLMIc;HIbRT>L<24Ekis8=co:u(gA.k-ghS=3lq\Moe`ejf7AGp77TM749/++);?lF2Q3Do".B8i(7TD]U[@SGDmN:`J'4%RJcYnj6Ro:Y'X)R\#'$RJ@g>S,3e=Wb$8kd:"r8rh-\TLo;N<F;*>QYi/l]"$$No;6hFqQ0"e0mVFoE%R_u,L"LD%.eKjN'Wsnen%RAM5Rn1ZRufkut2O1EF1-Fl,%;Vt2o"0W`e[SOSgn)0S6P^Cei,:_;q\A"IcO\>%uHKF'XjKbsBp-t=Os.qY.5@o6Fj//SMMRQi!%;?JO[a?HH.ns=anjlM#><!r0SY%)"k`QaLt:Ut)d`T>Moh>B-V2I2i[*HN%[R+ZS$9C$o)o?*rRk-#a`Rk@Y%j4N%,EOg1d=KU&Y%l/Ip<S4gTLFNID,H"POuStsN*9<FsK;Dqg\eN10U]!u"V38a%Hfl[1t4k:]D@IhX>$O'.HEp7&.D9'erMbCX<js5tZ9c$<'Ha,>e%Cq@,]\k"u\*4"hg"T(r*j4ps)im(>&HLo@X)goP&*nbYQH[&'&VG!.*F3US?P6jb:Z'6HE_sc7)flX3u4h5.Q`T>MW^+"!QCq@+d%JgtD)?&Xk>(LOL!mqfSF6]A!40kN=LEdVo!flV5g>:=&EjQtQAM7B0n2I5*M7'"[nT1p-b!UEXNnZqD*Vdr;pPV",f<rk-1RTJTW%"`Pj&FAog>BVn2/g;FO*-S.@QAogXa$q0gYp*\a@(.k-Ud4E;MY:_GT@dnenKC5e`P-]nN9Q*VdZVQELqFMEE;Qb$ZGi*<:Pi?6Q%_,o/uT9>U*;g?)A%?pi:<R+Jh'h.;ZVUVFrR+.`#F_HrkWtE$_7J.h"<"8D"Ai#&K]&kVD1t:10gk?prOtXBc.NWRik*ioEDT`sp%R_(P,l+?.sPVf5.C[OZP:EJei]AtFBn&CB=>4,X:2q1P8,@>L.c4h<>r\W%\G8]_`m7-IIUXZgea`JX+aCZ&>hjh3]afj)sd0rA9%mdL7m0tGh-+(fOaHL-d+7uXjA1ERsC-om3,@dFYRAC0#iB;P!m"s(_@OdZtPL,?e&o81=bCXC/%^)OL1QNMa]"/AfbQH*Lq*J#]\%BIN*r^M'R`LZ,FZN<V_kDX7+/50d\1mO_u5B6INXYXT/l9_&XJ_lRT:Z'V0P8XtXo:6mci/FK+JR/mV<_^*gYbc/+1hSe-/\Q&ft%Xuc,ZH@BE0#nQVG8BgpKRRi=kPDL-Em`>bq-/0V3&D[pmA`teeN,.@;dbT8lVSBk3Vd'kHU2(h1#/fS/VQ4:7h-emJbB-P3!8R%D%Hotm#@p1'Dju\;m7We&fmsmC>UIkN5knE&dUXKJBPC0c=CojY,94BBgm)hsQ;?%]R_`JSH=b0hj[IapPR)j7GQq)Vei#D(kg!Obt%)t*RjXcD1V2^0/0DR^W1o5TS6U@arG`kK)H\D]'4S+6dJdTLM2)t/Nn&;>tSj">[kBfFi?gm+1$@Vt5[;7&=&#^#F^n7#-rmTX"P%XKt_$[fDA]\pXI?*oiJFo5S3W`7ger..i]j@P)n_TtW8U,S'6TkTX"]e5H-7W=(Xi&ehFk98cXe5/7'%d@\?&c[^]5EIF8%:fd68%Z)gX[5/%G>9M<j0?4I`P+6Kkkf2Vh7$>OqQNb&[>P0VM+p-ElFhAp\.dOXE1:U;RN$&%Uq_IoWkJ%-J"9IU?;'TtC*RcCu*G.nO4%EK,]b,RB-1s%B)"Gh!es]#Xeshf?BtEV8\df`6:KH]DkuAg=!+<?Y;$lfqV'K1(trL,mTI]#Uj``.8S#75I;k/+01UGhlka)FQ?[%ENa_b"XkY6+M;m$))GSAqB8RI@WqLBc6PQKoc6iP?f$1#R/OPSi4$TH[r;#heeZU"gjnq-Y2Ap?=PLF:Rl`KuS.Fd'/o'ADm(MP!%l?W?52s..'*k(=6k=9_&q/A-h2pQi0c27rermE]+SV&VGm7g<UR4g4WP462^%(\<)#;eGYXkM?,j1I0]oH(H_5L.a0Usud(HoP;#%Ye_F<L@5`@9hh+(H%2!AKP1=RIJ[aP0e!E)Ac@C$Q0h;`ql(kOWbl'Y+!h?\9U>)^:TkspJrU#P<`3u<[^;mL5o\(@mj8\QSbP81%S90/pd1)[C9/t^P&HO2NjoU>$Ds\7_VjkELO)K:t=j>CTZ\-jCM="7hf0YRUH$L2a@q*u:6>%6Wjm2a,#jY/`TBLbb3/Z[=Z%8)>%2BBMVLj4RKCo:du@eQ0HA13W>djOb]Pu\k"iiu==HbdTiMWsoA5-Qebk*oK`?OXHG+[_\nT^g,f*=`a7QFK^hYlSM_AYfjKs!2ql%g>%MR'[tT[+`g?GTG4lB.'8m#_3@NV8"<Ia(2&@]Xc-3,o"pa#.'8,cUmi\TjQ_-,(+!%WfpH9VfCSfOC@ok2fSp/ZNi`DUd>Ra9%,HK_50Mhd6?[+L&dSr?QG\*P1m$;P@b%)S]ITdN#GsG[$NBA1Ca8nt2&3@(kff!H\P)Z`.r0S+pQ1[c;:<kD*`MjmDas!8MP_#.7%c^o1*OZ0TbK+!=V_+;(//d\&i&.l.,Dl+;fcVf%ef;:;^f*Ru5C>q0V"0\!3RRlR0Ds8:J7RSZM2eoHg9-am]YUQQ%]sa?6Eib#,%=<qHMXZ,_.VNaprmnEuPU%_]meOtcu](;QWQHE>\("+bpabl]pl"N20Ahc\d"7A%,m4,P"fN*`2FG?/ae6b4:B7k8NL?NH(kAn'Q%)rS7HAmX"gnrEC>$R\T&"*4I-a(j*T_!H27'"Z/K"dh.P0M*2/Q3EX5#;D'!3B7I$CX-+uCcP,AgRoP%cn/iSA-$;e!JIRnoIReZ%3Ii.Mb=Gcd=`XRudud/6;(kC/*[1tG/=CH8rN"p1L#Vt.K9u/.qCq.;$c]rG0?soks.t*k<k/1NV0j<:niqFLh`r2BQV7.=QF)iA%S/CEe^9h'Yq-D.0P\6-IV0mn@V6'QY-9J[mL'FFXB=QPH?->sA%5lYKIL0OA\CE6ng/,<20<a)+l1b$cNOBkr?GB7d?,jKm7_@8*%I6eGam)\qtoc-ofXa[&,=8(P;QQEJr*'$.:]mf4N;O%#u\CWB_n(P8INLS%T/QslnaYhY_Id-ArD9>*2]m`6c@=gL`#eO[5]meXQ%!#as+^[PD!Rra@G:lW6A0-,%Bo.*>@f.SR#dEMg9=mu%LQ[Zi]qBb$+3S_;s@qVWL]%8T."fh+]p$8#IhlV>P6p\lMlSgARNHVL4%HnXjigi;fCbJs)Who@Z,#0-<[UZ?I!hd#HKI_F6OoR$PbDtWGG+<'iX^\"1NKU[pT^=P#T/!"I*QTX^/CBn+bhs(G]R7lC(lE,NQ%A>P9WhAMG-8&!S.G$]TcpaFc1^=P#D$lF(.h`,llh-QgV\<67?bMaMClG.cFZ=S)VqsO+r,O_>p<kh1bmZHu2lPZPf<kl-O<2877%2b$hO?<PjWWWH0aBUF1Jh_7n1C%qH5Gotr=BGbfkhrsh)%?p^XEZa0uB\;\uC53\p._]S/WOM^5=&C@@?GCSZ3oh/M9stm\Y@$Fn%['B&l$ZBGQXaY\docr>ZQ`bug=)AlD?G@b3n0sH,oB9hK2(S!@I,i1<Fmn?0];ATPXaY-1Z-rEe^Xk."<Q\3$IDgL2dd:4p<G7-"%f.YB-GBTk7P#oq-d]Itl3`fhIl^+c_1X@8#Hi40:=C+!`.C]/mlBNULlSiqXi(3V=V$VnGo(7ipUYP/OHa'&FrBg<5_aW12[rST5%i"!4_N14CCHi;AU2K@n8b.W7\o3t&Qi9]06p\JIl-&m>V?[>%TD\hO"p\Mj&.0L62\,D>+l"bbTi\c#T1LsPQbMcI"4/du"N##pW%rK?B^<&'9(d/+Y*mLFrLlck5WCFsA?qHgc%6$nE(h/`l.F0Gs,ToE3`&*r'MN!'5*pMJYhR!A/.nS.[FKKM>F%%:F%f,BY#`p3-:%`VFVL1f:9`f#6($[Q-'H5Q3?F/043*]t@]USQgR!GWU,TqeJgYGlMGlS,UE3D=car>MGTr3n!`WeM#Y5Qd=:;rbSpB*P\,M[H#Fh%X4k\aWuLGJWqK(Ih:)C;ViU;<bIN"HF1&/V*8Kpr(Tm7rG.FqUe%X-LQ*g"`^<JJQmh_i>c'8[7dB(+8BfmuT^,.2Z=+?IZ4msi@%m/1!N>]utkp.n^^L-&\/WZFp,If?kT][g3?Hsp-DmgGtkn&J)XZ]FRX(Zmo!*_n;:GZAnK3iRX.gXWJH$gul0hf9u`Rn.m1QtY8]%/=$c`pQ$`ja.Ri?]6*3/hNo7P]=0tG07hX&I?N1*q:r#P$VRao`U/cK^<jU_:OboBl.jHtlRhN?eD;`lRiak3C0Qnp_a`,PFMhA3%:3,R=\^u`I]T)KMb":C@pq><nI]^B'ZcS$=Y-=^[50L,O90F"".8C$>eic7aPDRtLfo+*&gl6TVY0WWq5MMc3nE)BVA6WPbD.7tV%m5i[5G@eh+/JhI3D+q.6dCrH*9XXQEj&rKHeG#C^]:V98Rp2L<4`*r4n*Gl0q=&OuEotQJ@.^u=M;pTEN2YLg-PtM1Z"<fJ'+Yi\%,&D0nFafh"*Idae"lW@Mm9/TMJmZjachZMF[;m.7Q91]jc>B)CD.>J2br;P]X+f!UD.QSr(72/fc9s=mS*B16p5>d#mL+I'gX<.r%Mmr<6(W,&&QJ4&NbFo^g:Z(#P8(lA&Y;h*k`R`HG<]Um8H0aj&GONBnDf%+K?Vm>[B7#R(=G=_r!tEf=k03#f6VID@1!oZrd$9n=%FE+fKLF2W`_l_%Q3t#n?nt]0MjOmk-9mDYWr->)h@dBa5?Sl]ji(S9/^A1k]WtV"K?CmioW%FV0n18.82>q)?kkRN4UR8*Rl+O0I%S,'>_bLo![^%Wke&3qEWP?.!&CT=^Im5<lWPAZEsZZ[;P1o65,FF0a)]6-kT0<M@H]Qj7#m?bH^\FOX9p5+$*XF?T9VBC0HqX!qC%bIrae!89rL")-R"V=7&`m<-7B,"PmdOCq'pCt:]]H=kZFQ"R!&r(XX"GZOdOqUsX.g7JaL^"S<^^jmYbZ=^S\b:0n,^s].a@-[8l%?%-#1"fbW=[G76R=I_E@qYf9hm%;Bh,lM%M[J0f%So3TEIOtQEKBfN>Q-QCca/FWN`*cdWo(UBfT/J1S<[\16!98'NK(8HG(r'ac%0792:(@B`FRiB@2W6Y)<\[ah,.tbC).:\>7QjH_]HZLoN;='Ytm2ZW;_hZ%MfJYUM7W;?>o"\lMb.qYqa<TOq'qkoXX1QpZB=1H^%rc(Y:J+otG8Ws7iMpmRP.kob)4fcbg0$C9Ocgg599WcPFHLd67$9F=XUr#8VHKH4s/-7Ym1Zi!cDqo"bV:rKd(>#6ZE^luogj$6-%`'lRCeimDC?,jcpW"#ugmc&Rh!$s[N\iTa&Op,0>2W"+OX8-ksof4XB4_iqrkEDJ]#%Z*DLZ'lPqIWf*K@m,#kt+kY(u?41bQkB)%T#5JXl7_Ge@cs_@hu*!dD6YtSfXSZmj(m@jq/_4qWA4UQ<tjIYG7"Gj467Qu$MIY-nj5#(`f@'gBX&[q##uQ=M;V_'p#`Nf\9U*^%^:m^ZI=E]!2@5RA'j9^3E@u>@F3i[\mJ@ncFX&r4$GQ.uJs[!!kY&h+C+j6ln!UTVLU/UtqW8g/O.(n13:j':Dp>GXL<Z_gmiL_8%d#if1./F(E02g9853Ttl^+5c;p<*d6k+KOVbY5eIEm[%+ScufUU1Q."5q$BHlJQHfK9m*=SIWqids#7;F;0]jLTfZX8Y/@S(G*ul%BGp00F"YimY*riQj4@5="1;X4=nFuZf7Y0&JDoJKTD3Tsr]6<K%]c/Bo7HV-V7*r3lEI2,qF"eRM2U`"F1$DJGh*bt+Z.^BrqU]H%h>,Y4A=\2Z:FR\gnegl5eseZrG,LG6j;fUlGPj,)8`"H-2l+08-1<h(]2p&s6h68$]0TlrQ+Z/<DWS4G;t>s4]*l/BhJmR[^ajJj%]]8)@67F;()k<d@ntF"<Z]LsRVAM`%_*^Ng@6FUQZb*b+b'fJ[]R*[c]R=tu6>:0YCc%F0Z"TJ(_)N>dj\KZHot=q*Dt3#=*+_IZ%r.8r0b`Zm>22-6.QQbA!9F4bWqH!TscnO<jYcZ:QfC:l7BYW1gh,3+;5-NMN[s*+A2L)Z2]';DI&"]?U_#<)0M!E4aI(e0uFS@W:%^=n9HCKKs_.?sJ,eN]'Zbg-C4\h_'HSVMioIpE?ujm)kY\_qeJ=gj6[UDrdMimH5'[;jR'rHVTtc50e&(0>[$rM4U8heZ8m+05EX%Xk0bK*icVKEN-IXEkJiej4WbKlhX>`38]oc(fN@E"H/nCLX3.>^2MTY:Sr:Kp5i-&?EVedmSA=>Xa]1-Yd-#kdk>%Ad8.IKad]2f%6>:jbqs+F5505AK;K04T])KV)]%`f=H<j\RTq*i,2)S7Pr]jE:Ss[,BQXGsO!X$^;`:S4o^;(!:MJjn++O+<Dd1TK>WT@dYE=3;C%p;WY,H;QW&NDHU):(*o-Mlk\*Q#5^\@*Z6B2W_E-NOM,IZrQqhj1CTB&)[-6;VJ8@/cU+qY\1&/cY^$(dn(.s[lu6X.Kh%@8paC:%'hSK^SD>b6QeOIjg1'0iJjLRCMtjkWO>Gda4<pdu[?WcJ%6ao(%fbm)%f`>>-@`a8:m_T*FHprhb'a3ReT[j9rqQ3\B*Z#c'9/YO%kX@-gKV;Vsihl;sJf?p80=9)aL$(P4g+V=/.-0+9HWKAnRgV(h"M^7DBtmgW^Ns,d;0_!WkO1:VA:<4cKBi#6WU9Q4[o0-m%s+bm%eYA-]_%-no8:?LHM</Gr8jAP?UMFKOrHutRK@J8O[h&7Hd-^Mh07'*HD9aa$+5]@Xs/;lM1#jg-[cM"%NM=Z[pZ,S<qr?,E]Kc#T%m7Zj=Go.fl,'A8Ia=D[6T>3Z>4YCo)N9d[:FdKX//_$Q038&[:GOi&u/>$&5=58_'Bn]8;T8t?$kWSqi)JquZptc0-A*3%<Y.aI'%+^d%U[pOc>IT"O0XFK*S("f]s*s<eBqYc6_r:]dE>7_ThCs5j2qiX-AdCt6u):4sG05FEuDgbo9]=YG`7hji=rZ$;hs1DJt,I-"q%-]e:\SJ;#B17^Z#G1IWmA3,2S8MCqjREcnd=?.FX9]qJMZ$n-^WK8X20@$?[DMhKM,NF'`n]gLcbsq:lT1-b5/qbf3fA:C9Yu)j=%eo\7I_-t)MB6L=lD6M=_X%Z%Vfr4/6nS2JsA:'d=ccmNcP;>3r>(+++0jh=W2GoO"?'85X!LB&[k)5R5FHQFNk5bW63e5NV/7nM@%U3UHN/SZ4A03^So<oI]OfJBDEZtIV5](V(^4dL6.qX$dMlOfoT6<\cKH7?8nd(JPIfoOoX(:>0aK9IgM<#7\T5:cBrac#]kks]5\%m\?2NrU^$>or1eCk:nBc8`V!0a#o0GYXK!J_P#n&\rj5+Mkj'AR7"p83&<e3TsD.[Kt%V;/t'<geOJ0PaFP;F^C-GsGc:Fs?oT7^%Q9m%.a3N`L2r(0rpTYHDV4F2?6S).)AIuf()r72%S-O1HGLq/p/^B*J<&7l&[\rb*FRFbo7PBGlD,Z-;:h^h;hG0EGQ(0tN]U^Zl%LNqo_nohUO*?&K?Gro<cmb5n)PIK#;D4rYoaP5t-Fus_]>^8D:g+MG3Dl67_eG"$G\&6Y&Z0+U#YT7Z[lgng:oko._+U66#_;b5E%BHi6ZJ"AU[e?!A/T?7j&3o8(0j]\Y_Y(G/?cR=_*O/Y?baoXEOOTbp9hG.;Ypp<M)k&?n]X2Wi"<a!PH\+<76U_`+aQQ,DQK#>hl%VsegE%&kZD^e-P6EtZRbbO/'F33-k`bHL(qcRR7a*p))/K(=VuIQi&+[`7_dG2ulD%/4jjmJG_^9qP],^p;;"(#n5P,LNtqVEH4.%.ku5/s""smMGgaTl^&QuS$9#m:b'SNj(doE&In*Me`tK8g0WlJeODhXi]iG&iEt1il@r@sC`<mA4Pm\"9Q/h>>1LX=``)8:VRRuV%rGlnSd9=;uDV`lZQ,^Rr96bQe^NZui?<euR[XVGMQ>('"nqF`JJYhU/VKuClMC\8tffogjX(l*!9hoJ4+^q,Ai/-=jB\qXtDQC0S%V=sBCmE]N!j,?&A??SR2s)RD&ou>61Hed)!n3ilUV@9l\OM?e_m/u5tBV"0Jqj76N:4E"E[*",?'`V#ebFW3)IW<-tj[(KSa@aa<%$G*(#%F*I^[]>a#>ITM$"l4=EVPj5Ya0<^tV9*a@Zg=/fd4pWdk5.pDDaF-*ZK5:cdBU'ak"$^ao?4SC8LrOKqjqF9%:(L=Nb'"I%7k6YVGk&@Qk^(pj*Vn".bGH`CB,J4me-nMqI,?HG(QRN7CjJDDYmpM<VRUm+C>@Bh(8k58=0;]cNp<_Rg4m&Z.!qi8n/hg$o?+N(%R[fgZfrhChdrc(eL[E6;4@a#LP]]0Oq3[a(Mj0@"N@SeObHC9T0cSQ'j]Gcq@EC%;[*#gcb7i?gIB\+#;-qtFKkGS^o,MIUR:X9I%.iHSjbl$$?ZSloaAXd7*POW3uL9$X&pgr:UN8e0[B^`CiRUt;4Hp3`i4^FB:Bk>V7m%WH`AN=)mde1bS//ER4^sI4Ol',JsQWC8Z%\8C9AUq%gk@:14/#**Bonk(f+?5aRZ7%,'dFDA;i^^3eA)%RkMg9R9PV><)lIO@M[[\_/'H"ib&['Ii?Ad`!,DHU"rbqhIL^tS>2%QY?^r)P4;kAU=,HpS7nZ]B@7)Qs@"1ZB82]Z!ta'qj-RMHLg,YcI8)uCN<N@:r,tTA_@Q?o'N_0+McP&ZJe6$B4(qL[BaB\IJJIK%N\=bnG1gggG9<_,BEb@*"<#jYr+aBU/Estd^c+ASrSlJ8Z`\D(H0Q`2ZNUDQc/Q`&APY8<[i@BQ_%\Tp4Z/[>l.f^r"iA@pa-;du%k4omlLK7/Q1LsViXb*LScH\"?7[(CIY,5UJOeX32]4G':<M!?)f/7unY\=ti!j^QcYX#tC.@>]h^?u8/jTF*8eWLM,cn1<j-"d5[%Kpa?H@EC78[[aDB<[\G]iU!ejZ8Q!0'jfV"40hJ06WoID=ncc0)8d"(-9thCKp]D7#aU!k-Yp-O6l]UV?U_1U&4f=,d4gHh*3s@)%G#9A`;74&U=\qZ95mXA?cn.)0`)r>-H(LIf!/c^G@cUa<,."\2G(YT4^5MGF%&AOAJkeWW+HL0$B37TR-R%KT3W./=E7)32Y,pO0%"iGGShaqnB*@t9:J5aAh*6kgI[NcG>"nL!ma>[A5.&2FYYp\!5R'u*ijGa0M@H&]>)JSU8ROsIrH2s8c\mI@H%(^Bpc,0WNk%<hE%J.\HOXZ7NXShq'H@,P!@RBIu"YFF0G%&[NRRa$]4[U=T$+ni'S81Qs.-V&'t9QUZ4>#9_Pd?aTSXp;>^L&O1)<h<`n6H!t9W4"=?%AkNB++?NUT]5P=6:,sOl(DPI)M_2j;#R2o#*DFis&CUUt16><n5aZAUcUPdW6+R%\)E8iTD$^%GHPM]V#lY.#8QQr=%L.$+A<mb/%=O`$1$6GR'9*gWW3Ij.2eCG2tZfGdjY4KLoS>X=.(<CGPJT66/"6<),MChNOZ?S&G\N!A(a/=K"lG+jn2n0$W!(p,?0smiRh6TL7%^_9Y&\NCIce6J)`4<s*s21ZkdcmbkEN5[DQ*]T#KY04pZf<S]n15Ed-6PjcPZ7eOEI08NOnS-W9iGZGgrRDo7F'tUC)BF9^"-K^o%6oGW:GM*<g@Y&QMp?K4:LF8j!6=p?P3LhWr(J#uY!n<fU6i*#<Oe!n(!i?muD$UbX_IV_W3>G7sUGQupUb$>:V?*ee3q7o'S"Mp5%TbGgI;qHr)E&%[R$G\)ei!?;?Ke(l[9NQH!47&Lebg<SJXpa?WQ.U=j#_d@\:#UuH#NRstDGSOid-:p('MUh>QnVoOYgCqI3Ns=0%/mM.bKeH@),Hs^02-mJ/_$&_)Jff_Zi7+tri<U-9jJZnDPmu;qW]D#RTVh.U>nE$iUd<s*!l7,c)&!]$VrnF6[figT)'M3M0"qum%PMME)"d'?IJ]oJEa>`2tKRe<MYUb>/7#798HAU\^X!C&OELaWa(ePCj15%hpZKXJo6Om6YXuq7t-%l^XQ:&)#"4-$R"VugRJE>KM%C_;Nc[,d)9D93sUZ?LmJ/gVfBaYL:iT]_e*3P2L=Gp4pg!2c>iOA9Wp5cNfF3<g#$`<:sZmie&1d:=i?A*UTZ-;c&r@%Y#d@_r?Q%^-s(e,F2%[KdYRc!)4&#^m]*L.s=$DY@Kjd2SdVtOhd#oM\#rP0L6q"71jS#TU;Zh.`k,T"ke;i>>3NJ8LNaX5[`89";Z9W.5Gc@%rA8mKYB8.tYf/p94<;)<,KS'f"^>sV6@/m2o%`87=(/@YJr8B?A4!8%2Tp\kN[Y@ho-h'sROO3<GBBH4NWmtV[NQFP"A@uGKPcX*%G?fZp4<YX$6js;J,!B'eeNepY$7m>/!eY=j1_Gc0E1naaJ2gVB"VN1"/0JhufFT.9U#mesG9&\L#YI"OB,g]2oP49+J2-!8(1o(%%]'*fe#Y-7S:mr!4:?\?K+X"A=!=HdK]9`+M:qJDW6#C<fW$t-\2'K2K^fjVWiST6Z%L!jY4A\fVjpZ8diMd"r*EVGAS(Nhg",4_@%?1oN^L!Nf2i%N+e@LsqKfQp4qdp8MhW$r]$a]UmGpF(d>L5SYIjNTK";F"n=YR]js81-Tb4`R0ZC9GoKl8^UKOUSa>S;@8%0"R0-%&ICo;^(V]!:p:UNW#GrK-kXhe32*`o^d@ilF;"ZWquZ_Pn)V\4T7WX%HEP[W1e7(\+kh<O!bJVcT'()M4;0bJ&Qt,k2?c.,n#MYY%\@nDgn7OlR22a^)h?&O%\;6XU:0]gk)$/V$2`>2JW>h6Z(kA<i3l_mD6p`*'X!5)jj`hgM=^c\9oeTh(0Mc@(Pl<A.DsQ\E"_<3f%q.Ks$oq8d'#pAE8F_EZNX<CCjcsr2iM:;k!:W+5(_M6!?!BKY&Jhsc5TF8JtB.h2f4a0$X#aqoT%C/-*bePt>K-n%P"44"6oDs0'%!d4Zd[L(<t=2"bC)@qclo^W)Es12TI'7J*?LScHO,24Gm6=c=eEeX,SM+A+KR!3A`$D&]obCqjIX57^W/e3OS3GVCE%&a9Y6d3u0%cleMb]_-E!L9=hiqTJVpCh;F[dXYSkXq?2k0AK*i5p;q15Z_JeKQTRHe'F.]*cqftG9Y9D81_&V9/KO]:-/)P,Wm52RL$/eM#&<D%MZi%W?=?aW#':.(JESS:Mhk<IIN>p#ppSGUoM6J5U*u!iHQmhF)q6"m6!TU,6o5QDi'Jd[^mT?/qTqMfOp/?0JP!dI?`D82-%(8d%V;F7[!l`kj=qJtLc;t,UFbC<.L#e-X!qfde'_CTop0Q]-?hG?fRg7%F<ZIe9D=\Ci9a_@5Uk!&3Cl@YHaLN(_-j,?i#:W9<#oYY7%o0oku8Jtd#lm!l&QjGY"J`J*^lZeXg9TU-;@`'`D;QC+!C0=LDa>*Zl<$6#i9GFo?PGO)sPh<4'^pG5[g\')X-m`5a'tYen@X8C$%+CI/M"Bgj<A_HlO1a3b4d'G9S$Bb2p*eMabb,r7LJM<;of@RRFVC3BgT;T%k$V(DT)4Xf.8WQYh9UL2D\sik/*(pMe`+krE)/VAO%\s*EL9:e+DIRg:PIoA\]T\s$8lt7Aj9Q69Z<0;L#'0Bs'0N(1'#gc4aIlTG9*l=f8QlVYO^I[^)$Pr.JVP3-('JH\HGrD<aSf'6W%5qE$#P_0W_Qi2O7NODSETe;uTW:YU@10n(B_2=ou=i0t<r@B^1*>i2kSX"V%"uln15Rnt1RL+_#-P2G0ab+F_5ARKXh#o9e1+W3o%E"-(t1;HAY$Q>MmopiVr'9$m=e"b`fWZGb*I*2(i+QPGrl=!$R"*9*.,MZB8>uR?9L24@f/d%pD9WGCaBQq=)TP^.]>^2sH"nE\>%8^kS6q.B+:eT*(I"q7Zq`Yuj\WN/D\^umgBJ^)LI6kURSVp]d'#_gAk[blaL'?7?U4U=lRKic?gR[Vn3"_84'eZdujHR'"\`*+>W%ZG!OGH0MY7_(=5S"_Xgb__UbtM,ENU,Rg;g>(A0t8"OCF8h54=#>;SN8OPs=l*/,5n=p_`q##rQTH#*_enjH1aJifmFBCn@M'@a9%JS&Q+!&Z/^3b3=`)hO\28r`;V7g&>sP]["O+cXu'nsWG6=F`75$B[@\6c1'-&BJsi=_^bJ9a>=m.aI(,(KuK6gZBdCLhrffY1R9&%#6MfVN$EQOM;;4$]+Kjg0$#Q!T^YI6$>"Hh6$dFdM`rPR5o'ZgQ`Z!tkCFHX`>[=O]^Q'8Qfl93AW+Xl&k-'JarZ[CpN/j6+U)@F%Ul^)tp0,hhj9+BE)0K<L1h;55h;pFB!H;L.L)+0s%SmM)30m<QV?c%JXtEcX%@&4Wckr`1_I-oC:g(IoN=]Nt\jQEQ\r,G^dm_:;%3P'``h1Ic*NO0fm6$d^=IFNq$"d=WhgP*58o9naWB'KQZ()GhqRSOe?p&eaM3$ltGI!V>4\!n0"`AT=7;#0%"($S?oCIm:0])tMJ%>+]hNTJ,Qe\+'n#&E,NoaqtE_9F-1.DL44Z.h2]?P]"rK$F/KPM2N-Ao**@/eF2qC1Hf:n'J<c$Bu;_K?9it:JMHG@"U3IOLmR&k%U>cgi@./2J>PLTs8IB/mr1hmcbuM2\H4?N0K0tgh_UGAJl#isZ\r,)FMp^KKLSBW+HR(*GfHg6o/#!^5]PuI@_3cS*]J,qE%Wt5X%KHNel8$QK_QJ(JfUR8&(&=2N.9i$%?C"tWj?F^VYnAGQ'2?Jj:b>uP6"2"ip9^&o/AFYI<C@HhFU,XXpG<D^!_j;ag_6>P4(7--d%i$^Vri.>()6^,P(UTGGMb,#2X,KQZZ7+$^=&l*!=3ZYPeOta]O*#SGEBJL,f&AS[-?0<G:BuLq)L;=GP%N;EBAcCc]>\-\2(NNbo%\K5<W+9B/ZptKik.DWuQ?*e=o5"l$\79c<q"K-(Q*DSgC,V[9WC(N_)P:j^qA4#>]ZB1^=BW1iuAme5^lt.]?<hTOf:,jG'iKsjJ%0AXNSjD^;O5]`XOj4rlo&GW!/jY,Wq0XMg&);\6ElJUL=WV]:4"piV)_Ob_fHcjKd/kfBLTe8^R&B.`0S.@`8.&&4<*"_/HrBT2\%`(!;t]'UFn/".U2L;I?9;u@5.Hp#b`Ac#+NW<_m\Bg=eWng=:Yi<4tJ<oD(Y%>_luEbroAC,AB!i55bBaP\8lgAK]L5j+eW5urSO%*rl]E$2Uk1F/=^I"^#5-=Pq>sE`D)_9X>u?6Tp)d@@Al+Jb-YhA.`0b\/gE+5QVo0p<mqlA5'gmdi71AI=W+ri1B/iG:h@3*q30I%mPu"jJU`8.XTj.%_fZCiP3I0]JcS*F#U4fa+Ku#AZ"9'f:m(TI4l>g0?VnmQ$h.RQ"<D^A^kE8Q"_>Y3^_F%DFd:_jZe(/OYAWZZ%$m1q!nuKq="qOL/9/rjZh$DB^JGk]U3HF7/8-$pBEBDd2je:cQ8"n9?G#o@;)2>G.JRj[tXNoYKP[>:d+3t49*km%G)p4q,I5eA<%3m?&*A2fpeCq*JMlXtQiR92k`DoZIh==gZf#&QWWZ$_1=^9#8'kTW!c=hte@O&@G?mHoDFg+3bikHnN]5$Z9ggsOc=RkTUg._&k0%Z7lC]Es+eI,?r8NQo+JF2PL>W"bN&/OKpXifkhQO[Rr1g>4+b;#0=p^=lcTiEC9G>&`SE2i"NFfDRiln8J+i.@1uHC28h4H;:$'7%jsBNk$:qio)t8$7ZPTUb<IQ;)_DJ.p;h8Z'9_P!YCbQZuW*k4N('#A*]HIP"d\,4H$It@s8u#hD;hTchAYK2S^B>C0_JJ-J5_(=5%fZ[]VTc19KYXi0(To83>OdP'lUV7sS_@tg'/g3B^$fQUu].MD%/G_JI$REB>?4^RV^ju/EZ]C1"!XGN^iYP:N1'\$G"U7N]*?kS@%!!nMp8r!LXi.-X\,*u/3K#bi]ERj^J^p_;!(H?>t$ijY<W@?^+e5$W=%H_LH+_ndsClKsH#-g#%@sq5J5[=q"KZF\O7e<tVclsl!%,(m1S?BdV7MhQEbC]TSF>g_qM,*!,`5=abU_ebAV2ht7s/k%Lt&e>,`Ecl%Ne;ZX'#<lmTLBkAMliH(A4q1Mf(C45$+M&G@G)3jV%9:269jh`H!nsXNE>Ig.aj$-u6JI<"t`.>;_#&5+,0A..,Q=W--mS;KJ$pPt[s.tfHB=u,q+F'8Z?O=XVTG*G2^Pt[X,;")k5^Ge=%1U+Z'WX3`d%%>"HLo#'kWR6BZ:aG^A=,%Y.<bS4\*0)#=_4@>mo.L8`lFAm%a+=EpY8:&=G*$eU!L(*SW''k*<</t:3!70C7M`TW%i58G)4cYUJa!8Ot.bG-`D*)h?b.5X>,IeD,Q&#PH=k"U)+i[Rg!e>C@)i7rn#HhA.c>3^eK>iFV>+h5eiuDpZ;X?r=*VBQka@C?Z%"&eUo?:f*#JSLN+`_'LUpBV1M*(/topeD$uYnY4gN'`=uKAtq,07eXVPKnFGTKPdQ-4GGqLF+:p>6-_9r=FGCMPql[Kh9[hM_JC+%;0-0AR$0XOF_Z5%eI`:AB:_\+^^IT;Se2L]!]S8Be_GT<9?MX7fOpNogd[sZ+Ac<^`!-I5mc>Q+E$@>C0f</H_(kbVi>Y#bW"uh7%\Cq/A"]1m5Po94+l:M=,LI>4XbO@8ZqCoZ.>$%@-+s&QXClJg6Surk8K#2=57LV(XK7]bRkllGq*rE6C[i!I\fH-;[5&n6Nb\[KK%Ccp*E=9=Eb*ZmCnTi6_.#gqJTV@740ka^KD:<W0m^8$:U>m/Mn#!1`I\R`X^@S?AZ3(3tYY1.AgahSCG<XtC$*BFmj,J77'_>od]%VrEml_#R.p2hE_dffoRi^1_'Xb8:e-O\O9D5i@CY%$DnOBJ:1&R7@)O.$m4>[Lhlr5V&8=OCg">YJ?`?4[.oeC#R@`.LcUcR(iX.%"gpo^1(Bh`%]TNH$hPW=V(b_kL)+;KhuJ2`04=g%5TkNEU$B1n9F+W6AP$+FoW])=nF(od-O'T2R]bW_F0h8YXqnkfJh@m)r]mm3%"@P!\ful+U>D'ZM]?1ZcToL&."2b`8?R*15@[Gi*SSa'D^h62mVm7WjW%tt=RG#eVTP6!]D+-dJbl@dh;1:JKS'OUA?;5!9Zl.FF%@\UuS@YAJ=I+>&<_56Q,2hRmK1Y>hBbj@-Phe()_n!Q0[$EQF5F!Bbf#nR7PS+);fV44h.k_a.Y&.cR!TiH?[Q%2sAf41JGY!S'Y%T4#R+S!suUCJ#EU=so9]p'<p>gqd;XE$L8HNg((c&Z<(XO>:)I%UJjcU!O?2NDNb*Lu5W)?'<Ne&/mamIc48Wo%RB>\MQ2kKXc6c%)<-Zu7&dukK'3dLQ8f/K627El;Jaqsi9c>tB0cel5aO);MT-%8qdK9CD3Apu2WSos7sTSqQ=*ZQ69YsH%e1$[ct'D?`AU^k(mlV6%>_&t*TV`'56%gGB`7@'D6t<1"&7&D'<5cP*!"7O[S/`-j.\$WF^RM"o6ALZBW+9RU^7m\E&^0o&CI<(gSN]'W?qe*]1)Wjf`d,dk%_.,eK&Ws7A?N?cSK":]J5[3oXdDL\abd[o`n3ZF_m)TI6o1W*9e3(WG!I6LD.a`uk%)T]^mAB;#V$jP^2KGa(eu'/fZr"gq4n>i+%Ol?ad.sipZ`=WFnfZlmHG4?/f`aGa.aj;ZYL-a^mrKjAj"B@0s1p@HlN#tCmS`WkJ7;.q3W(a/V*rTOp6K/Rb8+AH\"V9`03f=uR%+;g-^*CU)O2@BQN*XsZl,0Gr6.!Z+pQjMmT&N#4liYaV&-qcBP_SW$(<!I&`q8$pOfa3d%*On@.kCYkuA&/9O0/]:D5DDcMU:!@A%(BFmH]N?MHDlDSB#d/,0d>WUcG!t(eDNH26%XD?a@)T>_X,C4Qk$K6A'sV&kp/EH"k,??=LLFO"5I1pdma1mI:auU`0Rd-W)W1tq%O[09/5kc#^OF;i^LS.]Rq%q,E^_70F5VU=Db%?BE"O#l*!=]LJD]!tU>W\=//W)(b5[cDZ4(ADHk6+RG_-@fR@Y0F[4Te4=qM^:d%g/!)2[OOWg(<*'!M+2lJIAmCdE!J<[qQb]!R2?N])%bmQh,61d[Z%p3;92.'=9mdSp#+rK+tZ1$YG3a9.F&1,4'E(^9[H`g0!\t,%p4_95LOG$/#hPKGgLXOsj_2XUifO>0%Ak3MVBYJ]_+caipf,sAVFj`5G6/^Ep^oW)kf\W^=,(hNC9.U7KoQAU/MK^7=g%l7e/9-'%MJY1ujbq#4>JVQF4O[3>-.R#!<2)Q;#]uqICgaT3CZ[CB%H/8uA8rrX7qaqA4HhJ=D*2G]Q+:QpUp<!-oO-b20S<M0qPG";!c]cs%$SJ&;mY:6B6iig(NuBUf_-m<U3*!O>o*??0a#J0;(.N:R<A%0tPqMFgXr;kW!9h,1JJE]8WdHMI:F4V^L-dQX+1;s*<#.3ck2MfP%>WF]0\>X*EWG%YMNNa6t=&^3e-bNCr$5ca""8.ek7<=2n"b>NpL>226@.m-?2IO/tHNn\H.V'_?S:Mh!k/etZKEOt/?MbUm4M8IX%M^Q^X!N)$L_[9n*a8j6mnR\^g=m#[EJ/GF]PiYJ?\kX?%6N\e?N%NCdE#;uBK/e7sq'c`'F4@Wu(o(pjXra+]G=d[&l]`]QfSm=(%k3D^o.A77K%A1G0JLtN?\9nMeoq7$_%MFU#<ni2%8/Oa8;[][X6Gc.EoRcORDMoP=n0@*f;$u,YFS/mNjWVXqkEeM0Tm?9mp)Lb?%`(#GF7M%(&gs8Fq#m``SP$upl@nB2Y(H,*r9GP%43$a)M/`h1Hr#cZqnJri0OAc1WLFo>fP.Ni0\-3C$'j+%TH<BZ1@5bV0rQ;A?%O;0P-JTMTokDl661me=H^h#bVc@]7WH04Y\L]oRp@u!n`<7uij&*a`.PFu_BUEm8\i<"8@+Bp^5-ceED%Eq4@]:kI=:WkK.fQ<7*%kY^Of_3HH)T$fMG/8>B@$4tl$eHuTg^8K1fLjipHLp1Mh=A:OuhZ,nd7Kqiu8"W;l=,P@.7>F9;UUNq8+3dZt;IY89$R1J6/KqJ+%B.r8*4Cd_,:n5O,"rnkP*AEt`a9h;?B4W4m7LqfdAYsFe6+uGT%7:G1MZ/P#-1VDEW"oCR`#enYS*TTEH5]1t_p?r*"B+Q#8DIU@%"4kLXhBji0a?:.Vc605hg!e#9;)VC34rg&blhR-pK(Xq\\tQLA4<qf_nE-cd,q;Y0d_"s("VJT^j"CrDA#j-)cW!AJPC<b+0sZ`Z%1K;jT1(\kl8aWls,NHj7]I%AOJ9@#lo*Hi(?V1qF%/J+G*c7N0m'`m4*7;;XW[QN((j\eWE0-lR>]aM\3=KmsI#c9*:n(^PiGoA/%LC.Y(Xt!=WGZ8dYKUKm^7XC*<+;C;]'^7WlMSo>7RB#p&,?D9Q+=ijB')<tqJ3X[hnAMZ4`LFq%K1-(')3!WC2/CB48OJH_c4d`^%A2M1g/L$/]'7?Iq_+6PeO9so3)eO:=79rE.(m#++jS7.h/JOS`i-1u#.n%b1OgkH3aKIuML\`N"1a1I;KE3T4Wdki6Uk'^b"1(\K%#nf9"kT48F>5gckOk%Ub>0L0s<,DZi]gV?Tg)Ui^i<4lTLF71ufnQBPamatk16@+3n5K/.f2U$$$S&qp@kg@bH'KM])Y/,\%Uu^U%6;VcpT,Gf2@,\'Crj*1$#P<e*POfMLa(KQT;XL/CM(f&Z!bE&@Ub;H`qIIhoMc-S$nNDQ[=:EXkYn^&6f6WN<L%W%"5Qe]bTkW-o%QFgPIJk$+dL)gu&JH!Z4?DLmf?m-;q.>#:<jbAZaZ'^Ma\?$*(R?kr7#TZoN_:/PgNN?P.$\=iU\47@&jT^/u$W18-?nF=YPD2A]%=_9ckUc_h"@*7nF0s7Zg%1*V1IY$1uVBqDU#+0CAWamAR.B;qVJo!8@04>fA76"jo]!3Ad)R+EAP8uP"ctg[47&#Cn7+a>('gNKF%,VrR=/>4cP.\^T"/e"6NM(hP'b=V%cL`:#b*=sNj:GRU,,L-?f.J/TD:.9gKGli1?4_?*/@Tfe`_$V7>PY.5J@6fH`!LKKhGq(Tl%*\Hjh)[S]oXn#(@QnOSiDh6][X"M"l1[iZZ<=K%kGcO)9G:f'l_e]WeOeIqn$tT_I`1*&"(ITf1PF((?6d"7K?Pu0J.?0q7SH*5[%7oZ*@9[5sM,qO!DV1lJkOC7`#K*aYZ%p4B9n!\\^>DIb5@"Kg]mXk*Y5^JD0UJJIu1o)dNQHG22Feqbk!&K]^GhZJXZIu6IOf2fB%!^>.Zpe>1QYi0KMfZI.O@5o@K*TSU(H:lHf=)sE\q4O=9Jn^]?<JN^U=r=h_)hB.VmlEqFU+g!l$E&^(e@f\7;^?aCU*3m5p'd2]%&B9VH9?LZb"?kDA:Ki^!#?0(dD0Alp-g63%`)^&JYDHXZCkFUq$\C#LHk*1@\9a0a%Idj`0Z_q'c\'"b$Ue[+$[!C>6h?QD=_3:R%WjI08LNeA-3i!E3e-&)YQON<uf:s>N*[26424,__S"EGpPNB!0oBF-Pp:re4([;*)Kl(!CmU"-NXok08_knuM-'^$j*I3Sd4n9a5%l6+q,/;<'i8A=DqBFWE"]\klpFk",jRKSQ@;:+Mk;HCYfrE$KRSJVc8J)FRR(lGQL(*^=!B[iJG%uh/Lco<p#-aEIcXIB2:JSBaS%1DLX`!+d2_ZEn@Y,qstmIkX&*E?:([6n'0M=6bL0//SuYQbe2G2i("5M(LnG'pKi"KXn[+&:B-3)7,9*4:X/(K\s<g(h"RL`)Jbd%Yc&\/f4$9Zr!^/ocm,%0%2GuGHHE<P-*&.l6h,-ZCPm"lGBtl97?"-S":5nkeK?h4!V,en+a2XKI0^lGWt3%dNU[=s0VbBq&T"T%%EokQrOnG`[,FP':.WL639]2!(-Q>@i&(mZ?+J0\5m2E$-0RuQ$.nA\Q1QR5>0asI2?,[47+a@KM&3u)t).757'%Ea4&_n#<+Y?S:%!jf)IJh4j0?ro&f;(N\NTm1`T-EZ()n.Qpd'_,AJWI[%SRU1AlC/'dI.#K15_cQaX!kQS6=If\GB1A.`7m\_)I0o<BMnTrP2l!mG%b0_>@ieTH[9D^2l9M*KJRlS^$TeFt)/-U-,WD"6"D8_cLjXe_c5tZ&W,M349C/C;iJuT<>T7@Jdl4cj<jeg#8R43U1\2K=O)I=5M%+,aDYOe*Mh1QYF$'p7u:0#gte"0-a:8s`u-[0j!fKF3V<[*#$A#"oXR7b:'P$V9cu+/n8Q0kS)N.efFK:mehknolYHp,ACl.p[J&%K>dmjkH'j*H=e;5fJKSjS1nT&_=W;].e"(HO<QHW`W@1i]X/CT"u+14.?MFud<KK[Mm4Pu4ik8Y?b(2;e38L>)EJ:*Q'GZMrsNR4%G_W,d$OA1:W>Ok\oAL8)8.A-lFj^1<&#.egX+5H?N!\]K(6\p8r2_8O*af3jCTLa6.6_UD?;(q%_8p;me"C:X'7ilRJtlT@DE(Z:%AJf#q2?Xl#m3J?7"NB5FO&_G.MZVM8l&ml;I"dT9>#pSsT_J]5MC5PqJ;,/*\:eKKKu1Gl`(0&<'dsC7!hJ$V/j70W0jhpU$.RFq%&*G"iG0kFjf[A\@1f^OgjZS]'$M]]f=TsAE8p"-4q`kEBWY7]2A@O`0(qP`*+B?BFemVS0J'\TPOD7$k;Yf^fBM?]L%ST)8g'FT'%\/5"9"WJ0bA[A?P6c)2Y1o)UV^///O[=bEu.S"aCg!n2^AT,+kkKNV8JZ>ds'Wg7*6h:>-S!4:t>D;S!HE_\/df)sD!n6gpY^T+r%)REMY+R%'bQR'HT]5#e<ca]o)KemA5#HM_*<h@mEG78S)d3q7-jKH2tTYkqbjo?U6P,QYCHT^l?ltC_HkI(J2'BHj"U^XJ!\V;6_%0dd[<;)hlq!RZPd*EF&pr_U>AVMa:VFHb8tMH"K/l!^+OOh%%K0#De*HM?1V.?d&13*d5Z!*#?p9a)h.\HN`3"'ZkD3@M)4ULh#&%!\K%L^i87?Z1o]I9jQ5SbfEc)O<Rn4o[N)\bYn]V"S8AU!s7s86g?.]!(fm3jW8ZB4a;3f*/LMg2:`q's3bp9i<Z>oO=h5ZGb2_f%3Z3sB-#*"LEf,a?MJ$\H*I1AEKap9`mib<O.\Y6W#p%Dn0tJEiR=%EJ3(iNm!XeA)'BtVL"Im0j"eN"^SKT"oc6AIF,.7RU6/Z0Z%\->Tk6C4@4!7/<X[q@2MjsrG(`YLlkIBkou-G@$:Hg`*<ckZ\8!L'gS_3P7LF\?-D.]IZs\WI)BoP$ZX@i.G[?%]!iXmLL);-[eb%Gf%T5$qIX\:O'kf%"tD'3<?Fab[;i<UM4Jjb/WTuKusl,:m@Z;M6AN@fhBVr=LE^jh5Gfi;[3_U/Fa'F8QWS?j:`be_beH4I"\R4%P@e(PJIppob!GO3"XPjFjgVn"D2"\M2!ONlV]B[^laj4nZV(aa)OAN;@$ZF2S]0"o7,]iW)@m7Gl$!Wmm7n3M(o/q>8reYu.b^E0%-70Y[1<<F4>>m'm\ANS?%.i295Ii^m%b_;0LJ]5aQI%]\53=;AVV6`hj"q$e5^'_V@0P4e'r%AU6(&Ve(=dW/":OS<#_ZjH(!?tO%%&c]WR\JJ#6X#]g=VVD`eDGha!X"N+QusRQ+;fm!""Z#PE=DBT=)ri16mRZIQAUeI[=I>q$%mgB6dbn%Xu'^pdt;$^BF[Z*l]e)S%?%#eRHN=/@L8/:*0<inMO4_<hdUqJAa(S@JelALi^2oNE$SQA^a"[<df`IQe:;DJB=K9rSO?a"m_&3AS+k1rSH,UP?JKYlA5uJ4M%!2c!STUCL]@9B"9[7(i\4]h`N0GDFV1_m6B?GJhMja_WA`?96'K+kP'!5*!Ff/t?<6Q-1n61dHH0QVN1!&(&B_1M9F`[Z;^H)Oh%%blfjsBL-q+ge<e8EM9-4Yp6+Q!ar]^QiLMOKB4aF]/jcLINV`0:dH->"@l[\`GbrSM062:_o'7iXhTO6<hb//J[u\%.9HctFDOr.%MWT,@Y"_5FH=qpk3s^4djDNB1LUpemNa\$bF6\(S9r@[#O?Z`>%qW!hVI18Mlb[*KM56H7oQjJ4[`F[RV'JC+6(.BEeR*AW'7#Fr%=:D$G"BJd/hska</`B*-82V(52!UAXH3r+(+`Apim+KVU"hq<LC0n;`88:_s5utge+34eW;$PLJd\cr8SgRX/@mC@mK1Z@;8MMV$%46NPO"YdmJ5)H]]pth*8VWT?;@7DdPU,Xn!/5/)OIH?&jjk2c\:KTtlGta_Jm9C0\,4J_h`7<U":>DLG#AQX1[S0>J@]JW<?Y+1l%^8lLWJ`&YSp,g@6PT:I<)*p_.9*$3=%#.F+$>2aNb7oK;0LsQ5<$_bqe1-BM)*#2n,sCB&_A3:K)7h)]<:q(Fq+J/WG[Yc'"bkVH%Qq1^8H?@m6a&ogCV-H^FI\pE"<n76R\!i7(pQTEo<,bhgc8L:6&?$C]Yoj%&Z;6sBO/,HAr/<19/2HeV=L6f)YtUG>b?0FRfXfcX%mNuVU')a6smEp/G[YJBU:"9oo\Pb*"1[6\GX27[@pf%^1-3iX[I)H.Z$4*T7%XA+>GEi?QlEIDus&)<d"7?7,'*;BNF]V(7Al=tI%PiaBt"kkX<;q6n>q.H#nJX-P1-L3&-P\RM(T;sTG61l=,<C:B^(Gc:)<N1f+QE]q5*]TBl@8u?!+MR0AJ1l:0XC_U3!sK2`>j9B8%bX.M,@d0bY/uccHDedZk9f-&t1!Osu3V\dLUr)(ekLa;N<:H.Vs"*Q>XAso2#0*@B":0XFR8AiONiXX^/42Y#DiEIA?,_P,]f+IM%M#`!)9O-7++?/S-)V[Q73J<5kl;eZ3BG8@iIHm4i0Ek\22eG'\FYO<b'F[%>P_kJO$hb6kV3.N;bL`!JN)=jRb_+'WG$/9/0Lan9%PJu\_+K/TaT2cme<cW:](S5NCj)@ub-<q+6rUI.^XreLr=`P#n:j$5a7iK5bqE/dSA,9e6.M>pm9uLR^-_h-33(&<&8qNM4?N$^;%T-6t2`+3WJoMo<=pd9Jk(t!qn'3&sd4[6cA()N9&+]>h-^;0c'NV1dW<Xf9ldAmZ-U5M@K@RqbE5q3WImC0-7;hnb#/]@SYXFh.T%Ae81"j.jBt12eDL>QHr]]p]QgY[kd1gH)%oHHI0l?PO8MVBlk,ag)mR#urs5>>p44;NWsD@p=ND]ELn>10-0J!u3Ae"edIsQC,YZ%8:KL&6>Q[6GF^I%.Rqtkf;5+^AX-G&a&m$f3A1r6@!#;A(kH6I=8<9`@Skf5#7E$$"8r85P(p\1<Y"_d8R,8RUU">*9!H2'<.oC%%+==p;V#o4a[8[SpRbdNa=OXOhnCe_8kuo3D4;=$B%4,?=P<epWk`2`D5e1'2647T@9&8p6"7Z-&mqB#.G]4=PcI=;q%rK>]6VV/=%)28gR).tI,RRs\A4?F\H[]2>ZV+"Oi28hl0)G5@_W<eeFH+<\(5d=_93k_26qZ?r#BJ+o]6S4UT!Q\#fG""p%C^V_W=`F2SiWR^9%j;>cDg`%"DE)ZRF&O(&XF@T8ZAkErD"JBPces$CRQ66pNKqMDV:#Sf$=I'0B+XQ##mKT[1j>7W4!drBc8`,6)!/u@6Ucoo3+(Yrp%B1-5@#S)@q1SH^\Qj#^9]3(BZR\@p3$CDP*kr=AEb>t_^COKMc!Hkh#4@N[9a6QreHLZ4#cAB&8C^'NcE<%tsTZS"dq5EkhhAfKk%A8murrO&"`A?!/?/>N:%9bl'b"$G_>d,>C%cQmWV'X64@A5AZJE)=9GZAt/+9#HpsBP;@[!"P(66s6nt(oF@Xb]F1AXksQLAGRcc%9,W7:K<`O9@&GmaQQa85*SRJYegsfs:5oJ(4>W[M]9fWnfo-GOFG/s1T=a[F+U^ll8msP:ZnVjIC+u$hS=g@`B<[a;%;(\G)6oip%(FVpX20rb5?[`FS2b0Yp6I!@>Q&9JbR7p/sZg#$+<:q^(*$bi?W<K:W=,='NBfZYP=g@1\:5]V+]s<,RPsjBNc]LrR)69DRX2e7l%Ars)*#gTe1N(+nd$<#JTY*Un=:b_,JS`<me`C*8.XlZJAW5*,,iGU'lbui*AUb0noj`hZ]Q/B%6!=U3ueR4mp5g?+)X0/G_rCec=%Ld5Ph)3fK"[Ld2g-CboBi#8=fatQt'Zj"F9hB,[7B6phs2;R%G%4A$Y!&3&2aTQ:RW>mj#XRZJPShs`K"%1=`rKXjHb1`QYq_Tb<%0afKgC;rMT"'K)Lc!NpX1Zo6k<"XI^jlhA!#-iM!#\"C)!^R)DBXP_jS1rI@pOgP'`ekn#5ZPo"K1d95]rSB0_;T@l_H',kj2`c.%JA%X6#Z8^Pi^&CP#$$@2_$WH7<2ke\XA4Rnhm2jr@I)G5TQ:aSFkl#t]D!BA%.Y1O"].164rtAWoaD7@Ft;TS+QtNOeFHR,$VP7X%o[H/]YMB%^DG\?k<d2R2ht@$#FuHCe,j,njK(BI0.Bj"k1*Rqf15@d/+=OH+&lOcYEF#p\4tTV`?_OrQY-m;S"?d4=WjD.W-ZB"&%chHh?G+WFtV#co*Js#8I_ifS/II>,34godJcShi)hr>HY[dGDt(E#e=e2kE;Nj-%?ZUj,M7pmSPap.hW\U<NpV$7]1ca^t5]>;3X%_ao8<WgLu(;k#.K2pq&@<JWW?OlG'/(Sh!5m0no7eE!c8/RB_cq"pg<b-nf*\*CdbB+#4"Drpq%f.=FpTYS-OD@0M<Ak,3Q#TpH+%L!$h4@:tS8N^+_o1#LL&Rf=pd2V,2B@o:n[A/R]tc;gcq4%*e;WM0B$[]Ql1W%Zo'V$d78C_/O:=fuj>>PEsAh]V[iD5sr-0pSZ$%liRTi,L>jhil+Mi%)P^0+_eHS\f,.`0g!FaYePiQRO@3AEHn+:/Aj_$D/Dm#lP(Kt(>Q[1Y#.O9bU*8I?T0NR>uNA'.%^\08bE9O%H%r_\@0YUcOet=uVnn=4-#r/8d;Bo+7@AU1W52/42S!Y`^rH:Vc!FquZ0^3VK'NCnF#Ias89Lm,JonQdX`Y.R@a\iikKK2rpW8O6%m3@a=:N>n^b46c^O(BuaG,-o\^#VjuOoi)rfVVke@?$UO;FK>oHQ6T;"-frVKE5pc]'iR?;[O\Hp5aoW#Q+G6c[@buU4MP)FeA3P%fb7qlb6$-;Ojd*Ee9'L!i%EamZVl87^:)4[_7J7)7!4Eh%h\1_YRC\5;$J.l(gWCb9dnW>*<DX5NOH(hA4iA\)TD*o<R&'#U-UXA%3I@A\VJN*rZSa.<:!f=u+G2CJ6IBQ.;)@Q.58m36*rg8+A?qsE%1T/'*';GZL=6)c-h3@Zds]QUF>@q2#k%PsE6#mcO;23Do"HV^%dmuElO]!pT76&_$i<d/([AAHf5Ma:3"XMn4:G9rVNf2s'pfRGnI%<a$pWL`D;@mAQ\@!o&eH]$62Ag.QVqh'uAcQ+Q]#EorclYB-%rY@>7'D0q[o#W9G&Qs)[B&qVB]p9,Dcd2Oda%rbmb_KA1&uF9Dge7M!SOldi.k?s?V^(:Wd$cOk!;M4>_6B-Hi)=3778.1=o"#X:%c`JZ3^=0lsQ@@GJ>tJ1$kj`p9=)<3-nF'kZYAR<<F^i@9P;<0"<7'Y\5,DCP"%GN#GM23k-+_YNIr.UJ[@JNQb\!XXLGV$$XnQtA%ZU;sPAW/s&3A',.b`"kc6>#Tu26Wd%S\TFS5mi,3W[f1S=JXnD5(LcHL_;Ho/oW6:lpqFuR#q-XW.8=4lE($=Q!3s1=s<#HF]N#V%EB^p!co/>5mW&]W05TXA#2maHO7_Cqm@.GSG=+2o-mti@,]28?#$Q0<.i@i8(4]f%$@AIEB;?%[e=si0OIVEa65,Jc8BQ8kp+bQR%ikYN1HghkHG;@2q@KZK]4g"c@]$(O/d"1i8qg5HpJ6",TTtB57WoaK*='l)LEoP`D`kia8_3`"A/$FfoOF5S/EPYln2/LVS:Tg&F%T[AML`"J"Gm%EZnDLa6lVp#!YEnW'Zbn&Z"?m`\gM"dXM$FprV+#n<01G8c+Ee`Lo#*On;]P2+6rCgO@Vce6#+'R<b6!"qKaVLU5%CI[Eg._u9jZ!Vj=n=<hq+t4qOf)b9tP!F>\efh&pHVEBr<<iO\77.GdMq$oc5M[TD2q+Q:"a=D]bR['d,":+I_&^6]'<%XpB<<8e%mmd;PXDP%tSCKc%"aRi3S5EB?ESB!S?#]sT%H(FI'\CDU/6qOR\I3;UZ.4HF2a^?#[!a)R+0@/+kJL81q(Tt@Xuo-??Sn_eiarn6%KPd95$BAuG-JfEG8s]3rdHJipjeh\f\k(OP3S9bV2eBFncmG*2AX1$LZ2h135A,\=>RD:Q*CrF^DFdb4;V_p8TJ@^SooKH7Fc!nH%6X"&(!`A<(,50,`j<PZF+u.[)bE"s#%`!0qRLD\*(^3OK[g6P3"2JI[4n8+O[;+VXS=HJ$W&&u%BqTt\%*j3pfo0=t+?XZui13f`%0f^4YnjI</+G%TQC=r"0Pd?G<S:QRPe5-VjrnEBu(pU_u=X_R1>%PB+Qj6cOXfDn*@+DJD;5]OI=YtmRc4(;Z,/s58os>UXE?D\G%?j8W+kj#s2C8<(8r_g7nph3<gE..&]A)!4-N>t8Q#`m+Fj5mj2(Q&GIR<3R8CRoJ3\cO7\;3u5qLG\D?g2b!3_n3.H&ED%W4LP#t%l#=<6HX0bRO`l()./;i2F":0`X_)C*87)U?d+-(oC7mj#Dp!nCg@"VX5E7mQYC=_m^f2AWml<HL$7A?Fl&:9:=bjMSaIZ7@HGNOO%Kq"E[lqgI_W7%gE<]H_c/!AFa_dD"J?'%S1Y?]-X16:Eu@B@[V-.W>Qau"?(9e#tD^fX69_^Go?1:_pD,"RG,L#kM\n>PBdRP""d%Ia&Ho@i=[NNc=;^2lbuhk@b"\j\D/ai@L\_n801I*S4>EOJl4P<<a_-6uSS/A&W75KTf/E?4/Rnk<bkgK"@B3d*Yr9CiUZDi^.1"%mtO1tBH7ZsjX@=H-Xot0.9InC/[_/#P6s31@^3Y:M7c9\;<+2*=C`^/-;Asi(q#W3*'pa_R1h1rbQrDR67nK)ddJ=\W1`LtSk,2Z%(T"K@kd^bLq`X>bML6O-6f7dHb!Jgh\RT>;Fd0Aef[5+TVYss_4G8,>2O\gr?+(IDBoL_VRDlI[-a9<s>ZWkZ@!hXoT7K('@PlYt%Irj.M@Bfu9Z]@NQ<bg1(bM&B=XX`I3Zsr2>DJad0WlKG$d:X)53>O)XSPI6#8FJF,CboLWJs2]C.T%SF3e.phai]-[>]U#@I*d?S%eU*gM</5<oY9?_`h.lBhqW/X4mVN8nC49nkp=%Y=G$]<DNu+tt3$q8_R:F=M%Ot-'`$Lhkb`St'(p:JCTaZMR7a6=1Ii0.fZ"qEf%(\>rFJ@i5"g8/GbD?KI\4g5WO><>I(_tZ52j`JnP$Y#mGn&8^:`[j?%o]gMdc[qG%T'UDq4G*np#adN[%EN,4Ruegh%S,c_,6J^S%R$RnEgfPtBi<ib\j=9W1+Ejq<;B!-npB6]G*!<I?lB;qr6puT:f)7!*pfVY+qKIKk-tIjV7-2Y":9LQGGE2;@]-Aqi?II'cP.XVd%ij6#(fn\`O)u;r-h:rEfWf5Uq^JE1^@Y2r\HVLFCU'0N]a#8WobO-&(5/OeHbXW$J_*M1:m;_eO]2<."!fAm-EHj[ARK7t,n4!eT%@5klO>DTJ7Tjka''Y_b`-al`NNG^pZ-&4g!mNm1TC.9LN2s^Mu69nW_j(54=U$At8arh[RkOns^1Gnl9aS<T<./@c48[YB/F;PY4%M=7_T:4M_YdAThM*5&'OOR)k`%"M;h9;i%06`n+^4-:phd2&j(-=to*pMOPmB@Z];a0'Jj-h;pa('oL'TU*ENJ6f;bK#Bd(^(Fdj%']Q'9;Qn3/UW:u^KNu'7!^I6T6/3@Pge-r2WU2"N[,s'?!u"7`b=MBT1a!ub[7-iFTUAbu"I^tlM.bl6lC2QiG'qksCKQiOC'_g&%'aO]fLKZ"ZC#9*?Y^P!N.5SK.`cYQ.AEFSrX6!rc>Y5.^)E"$?[>#Rs44_+)8rHO-)YARhnu6@PjtrBn)Gni)o2s!F.tZ=^JWqQ@%`S9H\`#?'[TTefhc&go`MYNH#@`1?s^T:WlG2,CZDVLa(=Obo<>5P+OSln\PM-8IOWage47-D?g1<pe^13?T:Cg&L#/0cC<4(mKZ%/?<iHJfC<+`];TI3)GF(#k$lCU_q+0]$OP/EAU`,V0hk%QC3Nr$MB_?"J$VOce=[rE.<SD>8T*4#C6Lu%GKO&gEkT\)DlD@gJ6@_%53e)if,+jH6f1:WQ-,T]@6YcAbT--ck\#9bqMs(Q23Ul\h/$;#Te:8I>l6c/rTIn')M8t2Gf:m?X3X*]P-*a[J)0?uM?.%1<!fdu%s)'-#*]_mAreU7`BV&Z%e<8f,_@GBG\Ge/X6H"jaS2\i=)]h6eHT4n#eRmU#qPDb\Rn!*4a-Y_>P,HPT!iqP/Z*]p(M?2"^02Es@%HYTrtj.9uY8^Gi)c"`oo^KE#LU2Ib19^TkgLZ6Fn.tPI6oP<D:_tCP3ej*l;g_"A=1>n1t;B9o*abKr#^65D%+IDs@5,!a>>WO#Z%Er#IrVSqt>@N/7R+q&%Pg;5("s(303O%mR\rQ$*^rUm,GN7t:W,5,_u8=V`ZNnE,X$>$3U%olrNjEkVoW5]f-nR4[&-[,oUL%#O0%V5DSVH4@!F@tb(bV:fWqAY2Lhb/d2]ed:/mi2??&Y>[hPnMER[58R4TlS4eL]XjDdT$!hr=++`n("ZYEU/>d.J7dN,5[^V5"=sYI%7M!<7FA$1i1SYklj1*]P4tZ1eh]@02SQ`T+^'@nV@4E!Toes^jeZEo2=tpci,Be-gH)?i@/lH,X#/>jT'\(3/AMM4M&j3l1,+kD/%c=>NZ?q4:C=XXRdW=K`%N'p#;1ejObdfPuSl#cep<K@C!?(6H@S67,C:ZK/m<;ZY\P+dSR?;DsK:ZeG01Y_0@2uO<+cGrOK65"c*%7l5[AcgVO[gMA[ASFCCIMcFYr0?:4:A7Yn<"=Lq+!/[U>OY5D]h4Ea\'dGejs4@Q"R=(0K2.\,8fjEfS@ii+p;^>n[,a!k1%hXM$%VZ9XBg/F>;JVRMf8XEQ1$XpBZCY-qG(&PW;g-(bN,2A7/_kZK`h(s?*-WZ"pD!ACt3fQ:$ZSs\-ZQ^1=)/)Ld&e4(ViV/td1R*Kh%NOVW!.(E\Wk[95=1RFXXm:op"?n=<*+<5&tOO@%I/C`hc7b*rriI-:lQ27)kV.K((\hgZ_C#Sf-7(00__OIFq@ZdB*hb<kMop8u6%)TY9e?a72IB3h?(XPb*G;GItgl0>=V&Y,X<E)d06B`#?plW+GuK>c.MhD&^`Ue)&LYtSJ1V,u/0$\"C&Uf(M4l.bp9&<U&8^/.to%KNQs@TkmCJmG0EjS"*Lc'jMdYfR)>3;sB1\]O6;!jgM4V,X8Yq\]NRg<6cla>/TEg_uhYG"21@FG!MSKFg+W\]#RP0aii\3E,5*C%`5I[!:9=ud!\0:0pO&GY=4A^4(>=3Z)^p`:,l@F@>rii>`j&,d++J?'Q=pX8M-U3R%+8NNj*(@F:VW6kQVX.Vls`,ga1<l-Dk6Bn%bu"*t)oGIdJ+"WJ.*%8j+cG[PT!NcN+>KA"f+LX#ZXW_q_eu\HBRdI8G&%df4Cq7E0ko`$\fMiU[efhO.$P1fL\MOAr+KH9OCbiM%@n_0;MBomE1\)#,%=0-+\lmP!`JJN,-fU[4/Nt;J[p'p4c$a%`)*(EK<RSIHjc=3985s38WD7lus/2!`VK$+AckO*,G/nhU^j\ss%bPc#,ro-Jn%^fAB'Z`:ce6EX+,*4R1+M9(bYGM/VCaHgiZ\HktBPj^%E%.@Lr2J?9W-/XT])*S\i:rbt!_l[5Bj]V%3ob"#He?TE%Yla_WA#^[IPUR<DaOJJX4EH]M4W#KG9ZA-]g*cobT\nB;U@.os;\>69'`ppqb`eC)6'g.NCQ3+f)+nT`l&E&+jO/$5dfV^e35]OK%h3M&?Y:*eT^f;^4PNY`Q0"IDqK<-?YbreD<M<oj,'A@97N6c<d$p@Cf^=4.(*Mo]UC$Rk!c/+B6p>MM_kh+DQ&a?\[O-<Jn45[12%ZCeDT@1t]1<'%,(IK*[gL,4O(aEFaa\:M>08`/`;=#&>O6)2I'Hc)73>"$128Dc@O9XYco%O&C"ne<Qh`.!2pO]=Gj7-@/c8i>GF%CLL)%gO0Zf6BXtABoYZKIsVMqCbLp(;X.825!ZFfer+G<0JDtOZK41]Np',WfKg[8jh>0=K\Mdk^qH86W!.-;`[Ft[/:=G1>[ogX%@)R(kXqFN*+K\7:/\OrQ7$m4bBH&uN\XkK#%(8.5d9af2)!?"ed(-1E@CZ>IP+um,:h&OK`Z",[JaVIaFm/?:h1%bN^;2M"qpIQd%d9iSCYV#3XJZkb0FsL:H=,r2l,`G(ppJ<nZL;UO]=^clZU2=8DW"c`u^3>Q!pD<p,#HfnT-&KXBcM.?,V/?7RE7dAPiA^LE=2O5Z%@Wf>*PJTcnKO:N3'Rj&#%S3Orc%i:06T1j"na/X'>N;,@!,H10IG\@IB[@GONMIn-k?CXRgZ+cgURL>H":kOS4_PR3Yq2s0RHD7Q%].3rKM->F'66-4i=-I-CUqZQ/^[5m#Arb]4@6mA(lg@tuQ[\\=55`SW55aC6s7!3fs7Z6_YJ3:#po>M:ldP%3IJN`_?TpZ&r6N\R%I/30]ci<UO?bS^Qq!%DIQOf^<r/o>&o&ooMI/)[dQ_49JVlsGkr:JlrqC>)(?[;VFa,e"3O+2ZW5It^cf`~>%AI9_PrivateDataEnd